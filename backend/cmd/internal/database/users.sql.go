// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    email,
    username,
    password,
    is_active,
    is_admin,
    avatar
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, created_at, updated_at, name, email, username, password, is_active, is_admin, avatar
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
	IsActive bool   `json:"is_active"`
	IsAdmin  bool   `json:"is_admin"`
	Avatar   string `json:"avatar"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.IsActive,
		arg.IsAdmin,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsActive,
		&i.IsAdmin,
		&i.Avatar,
	)
	return i, err
}

const getActiveUserByEmailAndUsername = `-- name: GetActiveUserByEmailAndUsername :one
SELECT id, created_at, updated_at, name, email, username, password, is_active, is_admin, avatar FROM users
WHERE email = $1 
AND username = $2
AND is_active = true
`

type GetActiveUserByEmailAndUsernameParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetActiveUserByEmailAndUsername(ctx context.Context, arg GetActiveUserByEmailAndUsernameParams) (User, error) {
	row := q.db.QueryRow(ctx, getActiveUserByEmailAndUsername, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsActive,
		&i.IsAdmin,
		&i.Avatar,
	)
	return i, err
}

const getActiveUserByEmailOrUsername = `-- name: GetActiveUserByEmailOrUsername :one
SELECT id, created_at, updated_at, name, email, username, password, is_active, is_admin, avatar FROM users
WHERE (email = $1 OR username = $1)
AND is_active = true
`

func (q *Queries) GetActiveUserByEmailOrUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getActiveUserByEmailOrUsername, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsActive,
		&i.IsAdmin,
		&i.Avatar,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, name, email, username, password, is_active, is_admin, avatar FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsActive,
		&i.IsAdmin,
		&i.Avatar,
	)
	return i, err
}
