// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movies.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
    title,
    file_path,
    file_name,
    container,
    size,
    content_type,
    run_time,
    adult,
    tag_line,
    summary,
    art,
    thumb,
    tmdb_id,
    year,
    release_date,
    budget,
    revenue,
    content_rating,
    audience_rating,
    critic_rating,
    spoken_languages
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17, $18, $19,
    $20, $21
)
RETURNING id, created_at, updated_at, title, file_path, file_name, container, size, content_type, run_time, adult, tag_line, summary, art, thumb, tmdb_id, year, release_date, budget, revenue, content_rating, audience_rating, critic_rating, spoken_languages
`

type CreateMovieParams struct {
	Title           string      `json:"title"`
	FilePath        string      `json:"file_path"`
	FileName        string      `json:"file_name"`
	Container       string      `json:"container"`
	Size            int64       `json:"size"`
	ContentType     string      `json:"content_type"`
	RunTime         int32       `json:"run_time"`
	Adult           bool        `json:"adult"`
	TagLine         string      `json:"tag_line"`
	Summary         string      `json:"summary"`
	Art             string      `json:"art"`
	Thumb           string      `json:"thumb"`
	TmdbID          string      `json:"tmdb_id"`
	Year            int32       `json:"year"`
	ReleaseDate     pgtype.Date `json:"release_date"`
	Budget          int32       `json:"budget"`
	Revenue         int32       `json:"revenue"`
	ContentRating   string      `json:"content_rating"`
	AudienceRating  float32     `json:"audience_rating"`
	CriticRating    float32     `json:"critic_rating"`
	SpokenLanguages string      `json:"spoken_languages"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.Title,
		arg.FilePath,
		arg.FileName,
		arg.Container,
		arg.Size,
		arg.ContentType,
		arg.RunTime,
		arg.Adult,
		arg.TagLine,
		arg.Summary,
		arg.Art,
		arg.Thumb,
		arg.TmdbID,
		arg.Year,
		arg.ReleaseDate,
		arg.Budget,
		arg.Revenue,
		arg.ContentRating,
		arg.AudienceRating,
		arg.CriticRating,
		arg.SpokenLanguages,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.FilePath,
		&i.FileName,
		&i.Container,
		&i.Size,
		&i.ContentType,
		&i.RunTime,
		&i.Adult,
		&i.TagLine,
		&i.Summary,
		&i.Art,
		&i.Thumb,
		&i.TmdbID,
		&i.Year,
		&i.ReleaseDate,
		&i.Budget,
		&i.Revenue,
		&i.ContentRating,
		&i.AudienceRating,
		&i.CriticRating,
		&i.SpokenLanguages,
	)
	return i, err
}

const getLatestMovies = `-- name: GetLatestMovies :many
SELECT 
    id,
    title,
    thumb,
    year
FROM movies
ORDER BY created_at DESC
LIMIT 12
`

type GetLatestMoviesRow struct {
	ID    int32  `json:"id"`
	Title string `json:"title"`
	Thumb string `json:"thumb"`
	Year  int32  `json:"year"`
}

func (q *Queries) GetLatestMovies(ctx context.Context) ([]GetLatestMoviesRow, error) {
	rows, err := q.db.Query(ctx, getLatestMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLatestMoviesRow{}
	for rows.Next() {
		var i GetLatestMoviesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Thumb,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovie = `-- name: GetMovie :one
SELECT id, created_at, updated_at, title, file_path, file_name, container, size, content_type, run_time, adult, tag_line, summary, art, thumb, tmdb_id, year, release_date, budget, revenue, content_rating, audience_rating, critic_rating, spoken_languages FROM movies
WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.FilePath,
		&i.FileName,
		&i.Container,
		&i.Size,
		&i.ContentType,
		&i.RunTime,
		&i.Adult,
		&i.TagLine,
		&i.Summary,
		&i.Art,
		&i.Thumb,
		&i.TmdbID,
		&i.Year,
		&i.ReleaseDate,
		&i.Budget,
		&i.Revenue,
		&i.ContentRating,
		&i.AudienceRating,
		&i.CriticRating,
		&i.SpokenLanguages,
	)
	return i, err
}

const getMovieByTitle = `-- name: GetMovieByTitle :one
SELECT id, created_at, updated_at, title, file_path, file_name, container, size, content_type, run_time, adult, tag_line, summary, art, thumb, tmdb_id, year, release_date, budget, revenue, content_rating, audience_rating, critic_rating, spoken_languages FROM movies
WHERE title ILIKE $1
LIMIT 1
`

func (q *Queries) GetMovieByTitle(ctx context.Context, title string) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovieByTitle, title)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.FilePath,
		&i.FileName,
		&i.Container,
		&i.Size,
		&i.ContentType,
		&i.RunTime,
		&i.Adult,
		&i.TagLine,
		&i.Summary,
		&i.Art,
		&i.Thumb,
		&i.TmdbID,
		&i.Year,
		&i.ReleaseDate,
		&i.Budget,
		&i.Revenue,
		&i.ContentRating,
		&i.AudienceRating,
		&i.CriticRating,
		&i.SpokenLanguages,
	)
	return i, err
}

const getMovieByTmdbID = `-- name: GetMovieByTmdbID :one
SELECT tmdb_id FROM movies
WHERE tmdb_id = $1
`

func (q *Queries) GetMovieByTmdbID(ctx context.Context, tmdbID string) (string, error) {
	row := q.db.QueryRow(ctx, getMovieByTmdbID, tmdbID)
	var tmdb_id string
	err := row.Scan(&tmdb_id)
	return tmdb_id, err
}

const getMoviesAlphabetically = `-- name: GetMoviesAlphabetically :many
SELECT 
    id,
    title,
    thumb,
    year
FROM movies
ORDER BY title ASC
`

type GetMoviesAlphabeticallyRow struct {
	ID    int32  `json:"id"`
	Title string `json:"title"`
	Thumb string `json:"thumb"`
	Year  int32  `json:"year"`
}

func (q *Queries) GetMoviesAlphabetically(ctx context.Context) ([]GetMoviesAlphabeticallyRow, error) {
	rows, err := q.db.Query(ctx, getMoviesAlphabetically)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMoviesAlphabeticallyRow{}
	for rows.Next() {
		var i GetMoviesAlphabeticallyRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Thumb,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
