// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movies.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
    title,
    file_path,
    file_name,
    container,
    size,
    content_type,
    run_time,
    adult,
    tag_line,
    summary,
    art,
    thumb,
    tmdb_id,
    imdb_id,
    year,
    release_date,
    budget,
    revenue,
    content_rating,
    audience_rating,
    critic_rating,
    spoken_languages
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,
    $21, $22
)
RETURNING id, created_at, updated_at, title, file_path, file_name, container, size, content_type, run_time, adult, tag_line, summary, art, thumb, tmdb_id, imdb_id, year, release_date, budget, revenue, content_rating, audience_rating, critic_rating, spoken_languages
`

type CreateMovieParams struct {
	Title           string      `json:"title"`
	FilePath        string      `json:"file_path"`
	FileName        string      `json:"file_name"`
	Container       string      `json:"container"`
	Size            int64       `json:"size"`
	ContentType     string      `json:"content_type"`
	RunTime         int32       `json:"run_time"`
	Adult           bool        `json:"adult"`
	TagLine         string      `json:"tag_line"`
	Summary         string      `json:"summary"`
	Art             string      `json:"art"`
	Thumb           string      `json:"thumb"`
	TmdbID          string      `json:"tmdb_id"`
	ImdbID          string      `json:"imdb_id"`
	Year            int32       `json:"year"`
	ReleaseDate     pgtype.Date `json:"release_date"`
	Budget          int64       `json:"budget"`
	Revenue         int64       `json:"revenue"`
	ContentRating   string      `json:"content_rating"`
	AudienceRating  float32     `json:"audience_rating"`
	CriticRating    float32     `json:"critic_rating"`
	SpokenLanguages string      `json:"spoken_languages"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.Title,
		arg.FilePath,
		arg.FileName,
		arg.Container,
		arg.Size,
		arg.ContentType,
		arg.RunTime,
		arg.Adult,
		arg.TagLine,
		arg.Summary,
		arg.Art,
		arg.Thumb,
		arg.TmdbID,
		arg.ImdbID,
		arg.Year,
		arg.ReleaseDate,
		arg.Budget,
		arg.Revenue,
		arg.ContentRating,
		arg.AudienceRating,
		arg.CriticRating,
		arg.SpokenLanguages,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.FilePath,
		&i.FileName,
		&i.Container,
		&i.Size,
		&i.ContentType,
		&i.RunTime,
		&i.Adult,
		&i.TagLine,
		&i.Summary,
		&i.Art,
		&i.Thumb,
		&i.TmdbID,
		&i.ImdbID,
		&i.Year,
		&i.ReleaseDate,
		&i.Budget,
		&i.Revenue,
		&i.ContentRating,
		&i.AudienceRating,
		&i.CriticRating,
		&i.SpokenLanguages,
	)
	return i, err
}

const getLatestMovies = `-- name: GetLatestMovies :many
SELECT 
    id,
    title,
    thumb,
    year
FROM movies
ORDER BY created_at DESC
LIMIT 12
`

type GetLatestMoviesRow struct {
	ID    int32  `json:"id"`
	Title string `json:"title"`
	Thumb string `json:"thumb"`
	Year  int32  `json:"year"`
}

func (q *Queries) GetLatestMovies(ctx context.Context) ([]GetLatestMoviesRow, error) {
	rows, err := q.db.Query(ctx, getLatestMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLatestMoviesRow{}
	for rows.Next() {
		var i GetLatestMoviesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Thumb,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovieByTmdbID = `-- name: GetMovieByTmdbID :one
SELECT id, tmdb_id FROM movies
WHERE tmdb_id = $1
`

type GetMovieByTmdbIDRow struct {
	ID     int32  `json:"id"`
	TmdbID string `json:"tmdb_id"`
}

func (q *Queries) GetMovieByTmdbID(ctx context.Context, tmdbID string) (GetMovieByTmdbIDRow, error) {
	row := q.db.QueryRow(ctx, getMovieByTmdbID, tmdbID)
	var i GetMovieByTmdbIDRow
	err := row.Scan(&i.ID, &i.TmdbID)
	return i, err
}

const getMovieCount = `-- name: GetMovieCount :one
SELECT COUNT(*) FROM movies
`

func (q *Queries) GetMovieCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getMovieCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMovieDetails = `-- name: GetMovieDetails :one
SELECT 
    m.id, m.created_at, m.updated_at, m.title, m.file_path, m.file_name, m.container, m.size, m.content_type, m.run_time, m.adult, m.tag_line, m.summary, m.art, m.thumb, m.tmdb_id, m.imdb_id, m.year, m.release_date, m.budget, m.revenue, m.content_rating, m.audience_rating, m.critic_rating, m.spoken_languages,
    COALESCE(
        json_agg(DISTINCT jsonb_build_object(
            'id', g.id,
            'tag', g.tag
        )) FILTER (WHERE g.id IS NOT NULL), '[]'
    ) as genres,
    COALESCE(
        json_agg(DISTINCT jsonb_build_object(
            'id', s.id,
            'name', s.name,
            'logo', s.logo
        )) FILTER (WHERE s.id IS NOT NULL), '[]'
    ) as studios,
    COALESCE(
        json_agg(DISTINCT jsonb_build_object(
            'id', a_cast.id,
            'name', a_cast.name,
            'thumb', a_cast.thumb,
            'character', cl.character,
            'sort_order', cl.sort_order
        )) FILTER (WHERE a_cast.id IS NOT NULL), '[]'
    ) as cast,
    COALESCE(
        json_agg(DISTINCT jsonb_build_object(
            'id', a_crew.id,
            'name', a_crew.name,
            'thumb', a_crew.thumb,
            'job', cw.job,
            'department', cw.department
        )) FILTER (WHERE a_crew.id IS NOT NULL), '[]'
    ) as crew,
    COALESCE(
        json_agg(DISTINCT jsonb_build_object(
            'id', me.id,
            'title', me.title,
            'url', me.url,
            'kind', me.kind
        )) FILTER (WHERE me.id IS NOT NULL), '[]'
    ) as extras
FROM movies m
LEFT JOIN movie_genres mg ON mg.movie_id = m.id
LEFT JOIN genres g ON g.id = mg.genre_id
LEFT JOIN movie_studios ms ON ms.movie_id = m.id
LEFT JOIN studios s ON s.id = ms.studio_id
LEFT JOIN cast_list cl ON cl.movie_id = m.id
LEFT JOIN artists a_cast ON a_cast.id = cl.artist_id
LEFT JOIN crew_list cw ON cw.movie_id = m.id
LEFT JOIN artists a_crew ON a_crew.id = cw.artist_id
LEFT JOIN movie_extras me ON me.movie_id = m.id
WHERE m.id = $1
GROUP BY m.id
`

type GetMovieDetailsRow struct {
	ID              int32              `json:"id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Title           string             `json:"title"`
	FilePath        string             `json:"file_path"`
	FileName        string             `json:"file_name"`
	Container       string             `json:"container"`
	Size            int64              `json:"size"`
	ContentType     string             `json:"content_type"`
	RunTime         int32              `json:"run_time"`
	Adult           bool               `json:"adult"`
	TagLine         string             `json:"tag_line"`
	Summary         string             `json:"summary"`
	Art             string             `json:"art"`
	Thumb           string             `json:"thumb"`
	TmdbID          string             `json:"tmdb_id"`
	ImdbID          string             `json:"imdb_id"`
	Year            int32              `json:"year"`
	ReleaseDate     pgtype.Date        `json:"release_date"`
	Budget          int64              `json:"budget"`
	Revenue         int64              `json:"revenue"`
	ContentRating   string             `json:"content_rating"`
	AudienceRating  float32            `json:"audience_rating"`
	CriticRating    float32            `json:"critic_rating"`
	SpokenLanguages string             `json:"spoken_languages"`
	Genres          interface{}        `json:"genres"`
	Studios         interface{}        `json:"studios"`
	Cast            interface{}        `json:"cast"`
	Crew            interface{}        `json:"crew"`
	Extras          interface{}        `json:"extras"`
}

func (q *Queries) GetMovieDetails(ctx context.Context, id int32) (GetMovieDetailsRow, error) {
	row := q.db.QueryRow(ctx, getMovieDetails, id)
	var i GetMovieDetailsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.FilePath,
		&i.FileName,
		&i.Container,
		&i.Size,
		&i.ContentType,
		&i.RunTime,
		&i.Adult,
		&i.TagLine,
		&i.Summary,
		&i.Art,
		&i.Thumb,
		&i.TmdbID,
		&i.ImdbID,
		&i.Year,
		&i.ReleaseDate,
		&i.Budget,
		&i.Revenue,
		&i.ContentRating,
		&i.AudienceRating,
		&i.CriticRating,
		&i.SpokenLanguages,
		&i.Genres,
		&i.Studios,
		&i.Cast,
		&i.Crew,
		&i.Extras,
	)
	return i, err
}

const getMoviesPaginated = `-- name: GetMoviesPaginated :many
SELECT 
    id,
    title,
    thumb,
    year,
    audience_rating,
    critic_rating
FROM movies
ORDER BY title ASC
LIMIT $1 OFFSET $2
`

type GetMoviesPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetMoviesPaginatedRow struct {
	ID             int32   `json:"id"`
	Title          string  `json:"title"`
	Thumb          string  `json:"thumb"`
	Year           int32   `json:"year"`
	AudienceRating float32 `json:"audience_rating"`
	CriticRating   float32 `json:"critic_rating"`
}

func (q *Queries) GetMoviesPaginated(ctx context.Context, arg GetMoviesPaginatedParams) ([]GetMoviesPaginatedRow, error) {
	rows, err := q.db.Query(ctx, getMoviesPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMoviesPaginatedRow{}
	for rows.Next() {
		var i GetMoviesPaginatedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Thumb,
			&i.Year,
			&i.AudienceRating,
			&i.CriticRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
