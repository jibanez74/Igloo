// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: device_codes.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanupExpiredDeviceCodes = `-- name: CleanupExpiredDeviceCodes :exec
DELETE FROM device_codes
WHERE expires_at <= CURRENT_TIMESTAMP
`

func (q *Queries) CleanupExpiredDeviceCodes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupExpiredDeviceCodes)
	return err
}

const createDeviceCode = `-- name: CreateDeviceCode :one
INSERT INTO device_codes (
    device_code,
    user_code,
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, created_at, device_code, user_code, expires_at, user_id, is_verified
`

type CreateDeviceCodeParams struct {
	DeviceCode string             `json:"device_code"`
	UserCode   string             `json:"user_code"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateDeviceCode(ctx context.Context, arg CreateDeviceCodeParams) (DeviceCode, error) {
	row := q.db.QueryRow(ctx, createDeviceCode, arg.DeviceCode, arg.UserCode, arg.ExpiresAt)
	var i DeviceCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.DeviceCode,
		&i.UserCode,
		&i.ExpiresAt,
		&i.UserID,
		&i.IsVerified,
	)
	return i, err
}

const getDeviceCode = `-- name: GetDeviceCode :one
SELECT id, created_at, device_code, user_code, expires_at, user_id, is_verified FROM device_codes
WHERE device_code = $1
`

func (q *Queries) GetDeviceCode(ctx context.Context, deviceCode string) (DeviceCode, error) {
	row := q.db.QueryRow(ctx, getDeviceCode, deviceCode)
	var i DeviceCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.DeviceCode,
		&i.UserCode,
		&i.ExpiresAt,
		&i.UserID,
		&i.IsVerified,
	)
	return i, err
}

const getDeviceCodeByUserCode = `-- name: GetDeviceCodeByUserCode :one
SELECT id, created_at, device_code, user_code, expires_at, user_id, is_verified FROM device_codes
WHERE user_code = $1
`

func (q *Queries) GetDeviceCodeByUserCode(ctx context.Context, userCode string) (DeviceCode, error) {
	row := q.db.QueryRow(ctx, getDeviceCodeByUserCode, userCode)
	var i DeviceCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.DeviceCode,
		&i.UserCode,
		&i.ExpiresAt,
		&i.UserID,
		&i.IsVerified,
	)
	return i, err
}

const verifyDeviceCode = `-- name: VerifyDeviceCode :exec
UPDATE device_codes
SET is_verified = true,
    user_id = $1
WHERE user_code = $2
`

type VerifyDeviceCodeParams struct {
	UserID   pgtype.Int4 `json:"user_id"`
	UserCode string      `json:"user_code"`
}

func (q *Queries) VerifyDeviceCode(ctx context.Context, arg VerifyDeviceCodeParams) error {
	_, err := q.db.Exec(ctx, verifyDeviceCode, arg.UserID, arg.UserCode)
	return err
}
