// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movie_studios.sql

package database

import (
	"context"
)

const addMovieStudio = `-- name: AddMovieStudio :exec
INSERT INTO movie_studios (movie_id, studio_id)
VALUES ($1, $2)
`

type AddMovieStudioParams struct {
	MovieID  int32 `json:"movie_id"`
	StudioID int32 `json:"studio_id"`
}

func (q *Queries) AddMovieStudio(ctx context.Context, arg AddMovieStudioParams) error {
	_, err := q.db.Exec(ctx, addMovieStudio, arg.MovieID, arg.StudioID)
	return err
}

const getMovieStudios = `-- name: GetMovieStudios :many
SELECT s.id, s.created_at, s.updated_at, s.name, s.country, s.logo, s.tmdb_id FROM studios s
JOIN movie_studios ms ON ms.studio_id = s.id
WHERE ms.movie_id = $1
`

func (q *Queries) GetMovieStudios(ctx context.Context, movieID int32) ([]Studio, error) {
	rows, err := q.db.Query(ctx, getMovieStudios, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studio{}
	for rows.Next() {
		var i Studio
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Country,
			&i.Logo,
			&i.TmdbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
