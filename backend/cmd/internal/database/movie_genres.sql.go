// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movie_genres.sql

package database

import (
	"context"
)

const addMovieGenre = `-- name: AddMovieGenre :exec
INSERT INTO movie_genres (movie_id, genre_id)
VALUES ($1, $2)
`

type AddMovieGenreParams struct {
	MovieID int32 `json:"movie_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) AddMovieGenre(ctx context.Context, arg AddMovieGenreParams) error {
	_, err := q.db.Exec(ctx, addMovieGenre, arg.MovieID, arg.GenreID)
	return err
}

const getMovieGenres = `-- name: GetMovieGenres :many
SELECT g.id, g.created_at, g.updated_at, g.tag, g.genre_type, g.tmdb_id FROM genres g
JOIN movie_genres mg ON mg.genre_id = g.id
WHERE mg.movie_id = $1
`

func (q *Queries) GetMovieGenres(ctx context.Context, movieID int32) ([]Genre, error) {
	rows, err := q.db.Query(ctx, getMovieGenres, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Genre{}
	for rows.Next() {
		var i Genre
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.GenreType,
			&i.TmdbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMovieGenre = `-- name: RemoveMovieGenre :exec
DELETE FROM movie_genres
WHERE movie_id = $1 AND genre_id = $2
`

type RemoveMovieGenreParams struct {
	MovieID int32 `json:"movie_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) RemoveMovieGenre(ctx context.Context, arg RemoveMovieGenreParams) error {
	_, err := q.db.Exec(ctx, removeMovieGenre, arg.MovieID, arg.GenreID)
	return err
}
