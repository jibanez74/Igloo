// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subtitles.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubtitle = `-- name: CreateSubtitle :one
INSERT INTO subtitles (
    title,
    index,
    codec,
    language,
    movie_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, title, index, codec, language, movie_id
`

type CreateSubtitleParams struct {
	Title    string      `json:"title"`
	Index    int32       `json:"index"`
	Codec    string      `json:"codec"`
	Language string      `json:"language"`
	MovieID  pgtype.Int4 `json:"movie_id"`
}

func (q *Queries) CreateSubtitle(ctx context.Context, arg CreateSubtitleParams) (Subtitle, error) {
	row := q.db.QueryRow(ctx, createSubtitle,
		arg.Title,
		arg.Index,
		arg.Codec,
		arg.Language,
		arg.MovieID,
	)
	var i Subtitle
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Index,
		&i.Codec,
		&i.Language,
		&i.MovieID,
	)
	return i, err
}

const getMovieSubtitles = `-- name: GetMovieSubtitles :many
SELECT id, created_at, updated_at, title, index, codec, language, movie_id FROM subtitles
WHERE movie_id = $1
ORDER BY index
`

func (q *Queries) GetMovieSubtitles(ctx context.Context, movieID pgtype.Int4) ([]Subtitle, error) {
	rows, err := q.db.Query(ctx, getMovieSubtitles, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subtitle{}
	for rows.Next() {
		var i Subtitle
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Index,
			&i.Codec,
			&i.Language,
			&i.MovieID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
