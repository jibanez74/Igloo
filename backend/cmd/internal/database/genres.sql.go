// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: genres.sql

package database

import (
	"context"
)

const createGenre = `-- name: CreateGenre :one
INSERT INTO genres (
    tag,
    genre_type,
    tmdb_id
) VALUES (
    $1, $2, $3
)
RETURNING id, created_at, updated_at, tag, genre_type, tmdb_id
`

type CreateGenreParams struct {
	Tag       string `json:"tag"`
	GenreType string `json:"genre_type"`
	TmdbID    int32  `json:"tmdb_id"`
}

func (q *Queries) CreateGenre(ctx context.Context, arg CreateGenreParams) (Genre, error) {
	row := q.db.QueryRow(ctx, createGenre, arg.Tag, arg.GenreType, arg.TmdbID)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.GenreType,
		&i.TmdbID,
	)
	return i, err
}

const getGenreByID = `-- name: GetGenreByID :one
SELECt tag FROM genres
WHERE id = $1
`

func (q *Queries) GetGenreByID(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRow(ctx, getGenreByID, id)
	var tag string
	err := row.Scan(&tag)
	return tag, err
}

const getGenreByTmdbID = `-- name: GetGenreByTmdbID :one
SELECT id, tag, tmdb_id FROM genres
WHERE tmdb_id = $1
`

type GetGenreByTmdbIDRow struct {
	ID     int32  `json:"id"`
	Tag    string `json:"tag"`
	TmdbID int32  `json:"tmdb_id"`
}

func (q *Queries) GetGenreByTmdbID(ctx context.Context, tmdbID int32) (GetGenreByTmdbIDRow, error) {
	row := q.db.QueryRow(ctx, getGenreByTmdbID, tmdbID)
	var i GetGenreByTmdbIDRow
	err := row.Scan(&i.ID, &i.Tag, &i.TmdbID)
	return i, err
}
