// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: genres.sql

package database

import (
	"context"
)

const createGenre = `-- name: CreateGenre :one
INSERT INTO genres (
    tag,
    genre_type,
    tmdb_id
) VALUES (
    $1, $2, $3
)
RETURNING id, created_at, updated_at, tag, genre_type, tmdb_id
`

type CreateGenreParams struct {
	Tag       string `json:"tag"`
	GenreType string `json:"genre_type"`
	TmdbID    int32  `json:"tmdb_id"`
}

func (q *Queries) CreateGenre(ctx context.Context, arg CreateGenreParams) (Genre, error) {
	row := q.db.QueryRow(ctx, createGenre, arg.Tag, arg.GenreType, arg.TmdbID)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.GenreType,
		&i.TmdbID,
	)
	return i, err
}

const getGenre = `-- name: GetGenre :one
SELECT id, created_at, updated_at, tag, genre_type, tmdb_id FROM genres
WHERE id = $1
`

func (q *Queries) GetGenre(ctx context.Context, id int32) (Genre, error) {
	row := q.db.QueryRow(ctx, getGenre, id)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.GenreType,
		&i.TmdbID,
	)
	return i, err
}

const listGenres = `-- name: ListGenres :many
SELECT id, created_at, updated_at, tag, genre_type, tmdb_id FROM genres
ORDER BY tag
`

func (q *Queries) ListGenres(ctx context.Context) ([]Genre, error) {
	rows, err := q.db.Query(ctx, listGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Genre{}
	for rows.Next() {
		var i Genre
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.GenreType,
			&i.TmdbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGenresByType = `-- name: ListGenresByType :many
SELECT id, created_at, updated_at, tag, genre_type, tmdb_id FROM genres
WHERE genre_type = $1
ORDER BY tag
`

func (q *Queries) ListGenresByType(ctx context.Context, genreType string) ([]Genre, error) {
	rows, err := q.db.Query(ctx, listGenresByType, genreType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Genre{}
	for rows.Next() {
		var i Genre
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.GenreType,
			&i.TmdbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
