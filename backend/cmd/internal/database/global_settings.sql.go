// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: global_settings.sql

package database

import (
	"context"
)

const createSettings = `-- name: CreateSettings :one
INSERT INTO global_settings (
    port,
    debug,
    base_url,
    movies_dir_list,
    movies_img_dir,
    music_dir_list,
    tvshows_dir_list,
    transcode_dir,
    studios_img_dir,
    static_dir,
    artists_img_dir,
    avatar_img_dir,
    download_images,
    tmdb_api_key,
    ffmpeg_path,
    ffprobe_path,
    hardware_acceleration,
    jellyfin_token,
    issuer,
    audience,
    secret,
    cookie_domain,
    cookie_path
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23
)
RETURNING id, created_at, updated_at, port, debug, base_url, movies_dir_list, movies_img_dir, music_dir_list, tvshows_dir_list, transcode_dir, studios_img_dir, artists_img_dir, avatar_img_dir, static_dir, download_images, tmdb_api_key, ffmpeg_path, ffprobe_path, hardware_acceleration, jellyfin_token, issuer, audience, secret, cookie_domain, cookie_path
`

type CreateSettingsParams struct {
	Port                 int32  `json:"port"`
	Debug                bool   `json:"debug"`
	BaseUrl              string `json:"base_url"`
	MoviesDirList        string `json:"movies_dir_list"`
	MoviesImgDir         string `json:"movies_img_dir"`
	MusicDirList         string `json:"music_dir_list"`
	TvshowsDirList       string `json:"tvshows_dir_list"`
	TranscodeDir         string `json:"transcode_dir"`
	StudiosImgDir        string `json:"studios_img_dir"`
	StaticDir            string `json:"static_dir"`
	ArtistsImgDir        string `json:"artists_img_dir"`
	AvatarImgDir         string `json:"avatar_img_dir"`
	DownloadImages       bool   `json:"download_images"`
	TmdbApiKey           string `json:"tmdb_api_key"`
	FfmpegPath           string `json:"ffmpeg_path"`
	FfprobePath          string `json:"ffprobe_path"`
	HardwareAcceleration string `json:"hardware_acceleration"`
	JellyfinToken        string `json:"jellyfin_token"`
	Issuer               string `json:"issuer"`
	Audience             string `json:"audience"`
	Secret               string `json:"secret"`
	CookieDomain         string `json:"cookie_domain"`
	CookiePath           string `json:"cookie_path"`
}

func (q *Queries) CreateSettings(ctx context.Context, arg CreateSettingsParams) (GlobalSetting, error) {
	row := q.db.QueryRow(ctx, createSettings,
		arg.Port,
		arg.Debug,
		arg.BaseUrl,
		arg.MoviesDirList,
		arg.MoviesImgDir,
		arg.MusicDirList,
		arg.TvshowsDirList,
		arg.TranscodeDir,
		arg.StudiosImgDir,
		arg.StaticDir,
		arg.ArtistsImgDir,
		arg.AvatarImgDir,
		arg.DownloadImages,
		arg.TmdbApiKey,
		arg.FfmpegPath,
		arg.FfprobePath,
		arg.HardwareAcceleration,
		arg.JellyfinToken,
		arg.Issuer,
		arg.Audience,
		arg.Secret,
		arg.CookieDomain,
		arg.CookiePath,
	)
	var i GlobalSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Port,
		&i.Debug,
		&i.BaseUrl,
		&i.MoviesDirList,
		&i.MoviesImgDir,
		&i.MusicDirList,
		&i.TvshowsDirList,
		&i.TranscodeDir,
		&i.StudiosImgDir,
		&i.ArtistsImgDir,
		&i.AvatarImgDir,
		&i.StaticDir,
		&i.DownloadImages,
		&i.TmdbApiKey,
		&i.FfmpegPath,
		&i.FfprobePath,
		&i.HardwareAcceleration,
		&i.JellyfinToken,
		&i.Issuer,
		&i.Audience,
		&i.Secret,
		&i.CookieDomain,
		&i.CookiePath,
	)
	return i, err
}

const getSettings = `-- name: GetSettings :one
SELECT id, created_at, updated_at, port, debug, base_url, movies_dir_list, movies_img_dir, music_dir_list, tvshows_dir_list, transcode_dir, studios_img_dir, artists_img_dir, avatar_img_dir, static_dir, download_images, tmdb_api_key, ffmpeg_path, ffprobe_path, hardware_acceleration, jellyfin_token, issuer, audience, secret, cookie_domain, cookie_path FROM global_settings LIMIT 1
`

func (q *Queries) GetSettings(ctx context.Context) (GlobalSetting, error) {
	row := q.db.QueryRow(ctx, getSettings)
	var i GlobalSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Port,
		&i.Debug,
		&i.BaseUrl,
		&i.MoviesDirList,
		&i.MoviesImgDir,
		&i.MusicDirList,
		&i.TvshowsDirList,
		&i.TranscodeDir,
		&i.StudiosImgDir,
		&i.ArtistsImgDir,
		&i.AvatarImgDir,
		&i.StaticDir,
		&i.DownloadImages,
		&i.TmdbApiKey,
		&i.FfmpegPath,
		&i.FfprobePath,
		&i.HardwareAcceleration,
		&i.JellyfinToken,
		&i.Issuer,
		&i.Audience,
		&i.Secret,
		&i.CookieDomain,
		&i.CookiePath,
	)
	return i, err
}

const getSettingsCount = `-- name: GetSettingsCount :one
SELECT COUNT(*) FROM global_settings
`

func (q *Queries) GetSettingsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getSettingsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
