// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: global_settings.sql

package database

import (
	"context"
)

const createGlobalSettings = `-- name: CreateGlobalSettings :one
INSERT INTO global_settings (
    debug,
    transcode_dir,
    movie_dir,
    music_dir,
    tv_shows_dir,
    static_dir,
    max_user_transcode,
    ffmpeg,
    ffprobe,
    tmdb_key,
    redis_host,
    redis_user,
    redis_password,
    redis_port,
    download_images,
    postgres_host,
    postgres_port,
    postgres_user,
    postgres_password,
    postgres_db,
    postgres_ssl_mode,
    postgres_timezone,
    postgres_max_connections
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17, $18, $19,
    $20, $21, $22, $23
)
RETURNING id, created_at, updated_at, debug, transcode_dir, movie_dir, music_dir, tv_shows_dir, static_dir, max_user_transcode, ffmpeg, ffprobe, tmdb_key, redis_host, redis_user, redis_password, redis_port, download_images, postgres_host, postgres_port, postgres_user, postgres_password, postgres_db, postgres_ssl_mode, postgres_timezone, postgres_max_connections
`

type CreateGlobalSettingsParams struct {
	Debug                  bool   `json:"debug"`
	TranscodeDir           string `json:"transcode_dir"`
	MovieDir               string `json:"movie_dir"`
	MusicDir               string `json:"music_dir"`
	TvShowsDir             string `json:"tv_shows_dir"`
	StaticDir              string `json:"static_dir"`
	MaxUserTranscode       int32  `json:"max_user_transcode"`
	Ffmpeg                 string `json:"ffmpeg"`
	Ffprobe                string `json:"ffprobe"`
	TmdbKey                string `json:"tmdb_key"`
	RedisHost              string `json:"redis_host"`
	RedisUser              string `json:"redis_user"`
	RedisPassword          string `json:"redis_password"`
	RedisPort              int32  `json:"redis_port"`
	DownloadImages         bool   `json:"download_images"`
	PostgresHost           string `json:"postgres_host"`
	PostgresPort           int32  `json:"postgres_port"`
	PostgresUser           string `json:"postgres_user"`
	PostgresPassword       string `json:"postgres_password"`
	PostgresDb             string `json:"postgres_db"`
	PostgresSslMode        string `json:"postgres_ssl_mode"`
	PostgresTimezone       string `json:"postgres_timezone"`
	PostgresMaxConnections int32  `json:"postgres_max_connections"`
}

func (q *Queries) CreateGlobalSettings(ctx context.Context, arg CreateGlobalSettingsParams) (GlobalSetting, error) {
	row := q.db.QueryRow(ctx, createGlobalSettings,
		arg.Debug,
		arg.TranscodeDir,
		arg.MovieDir,
		arg.MusicDir,
		arg.TvShowsDir,
		arg.StaticDir,
		arg.MaxUserTranscode,
		arg.Ffmpeg,
		arg.Ffprobe,
		arg.TmdbKey,
		arg.RedisHost,
		arg.RedisUser,
		arg.RedisPassword,
		arg.RedisPort,
		arg.DownloadImages,
		arg.PostgresHost,
		arg.PostgresPort,
		arg.PostgresUser,
		arg.PostgresPassword,
		arg.PostgresDb,
		arg.PostgresSslMode,
		arg.PostgresTimezone,
		arg.PostgresMaxConnections,
	)
	var i GlobalSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Debug,
		&i.TranscodeDir,
		&i.MovieDir,
		&i.MusicDir,
		&i.TvShowsDir,
		&i.StaticDir,
		&i.MaxUserTranscode,
		&i.Ffmpeg,
		&i.Ffprobe,
		&i.TmdbKey,
		&i.RedisHost,
		&i.RedisUser,
		&i.RedisPassword,
		&i.RedisPort,
		&i.DownloadImages,
		&i.PostgresHost,
		&i.PostgresPort,
		&i.PostgresUser,
		&i.PostgresPassword,
		&i.PostgresDb,
		&i.PostgresSslMode,
		&i.PostgresTimezone,
		&i.PostgresMaxConnections,
	)
	return i, err
}

const getGlobalSettings = `-- name: GetGlobalSettings :one
SELECT id, created_at, updated_at, debug, transcode_dir, movie_dir, music_dir, tv_shows_dir, static_dir, max_user_transcode, ffmpeg, ffprobe, tmdb_key, redis_host, redis_user, redis_password, redis_port, download_images, postgres_host, postgres_port, postgres_user, postgres_password, postgres_db, postgres_ssl_mode, postgres_timezone, postgres_max_connections FROM global_settings
LIMIT 1
`

func (q *Queries) GetGlobalSettings(ctx context.Context) (GlobalSetting, error) {
	row := q.db.QueryRow(ctx, getGlobalSettings)
	var i GlobalSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Debug,
		&i.TranscodeDir,
		&i.MovieDir,
		&i.MusicDir,
		&i.TvShowsDir,
		&i.StaticDir,
		&i.MaxUserTranscode,
		&i.Ffmpeg,
		&i.Ffprobe,
		&i.TmdbKey,
		&i.RedisHost,
		&i.RedisUser,
		&i.RedisPassword,
		&i.RedisPort,
		&i.DownloadImages,
		&i.PostgresHost,
		&i.PostgresPort,
		&i.PostgresUser,
		&i.PostgresPassword,
		&i.PostgresDb,
		&i.PostgresSslMode,
		&i.PostgresTimezone,
		&i.PostgresMaxConnections,
	)
	return i, err
}

const updateGlobalSettings = `-- name: UpdateGlobalSettings :one
UPDATE global_settings
SET 
    debug = $2,
    transcode_dir = $3,
    movie_dir = $4,
    music_dir = $5,
    tv_shows_dir = $6,
    static_dir = $7,
    max_user_transcode = $8,
    ffmpeg = $9,
    ffprobe = $10,
    tmdb_key = $11,
    redis_host = $12,
    redis_user = $13,
    redis_password = $14,
    redis_port = $15,
    download_images = $16,
    postgres_host = $17,
    postgres_port = $18,
    postgres_user = $19,
    postgres_password = $20,
    postgres_db = $21,
    postgres_ssl_mode = $22,
    postgres_timezone = $23,
    postgres_max_connections = $24,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, created_at, updated_at, debug, transcode_dir, movie_dir, music_dir, tv_shows_dir, static_dir, max_user_transcode, ffmpeg, ffprobe, tmdb_key, redis_host, redis_user, redis_password, redis_port, download_images, postgres_host, postgres_port, postgres_user, postgres_password, postgres_db, postgres_ssl_mode, postgres_timezone, postgres_max_connections
`

type UpdateGlobalSettingsParams struct {
	ID                     int32  `json:"id"`
	Debug                  bool   `json:"debug"`
	TranscodeDir           string `json:"transcode_dir"`
	MovieDir               string `json:"movie_dir"`
	MusicDir               string `json:"music_dir"`
	TvShowsDir             string `json:"tv_shows_dir"`
	StaticDir              string `json:"static_dir"`
	MaxUserTranscode       int32  `json:"max_user_transcode"`
	Ffmpeg                 string `json:"ffmpeg"`
	Ffprobe                string `json:"ffprobe"`
	TmdbKey                string `json:"tmdb_key"`
	RedisHost              string `json:"redis_host"`
	RedisUser              string `json:"redis_user"`
	RedisPassword          string `json:"redis_password"`
	RedisPort              int32  `json:"redis_port"`
	DownloadImages         bool   `json:"download_images"`
	PostgresHost           string `json:"postgres_host"`
	PostgresPort           int32  `json:"postgres_port"`
	PostgresUser           string `json:"postgres_user"`
	PostgresPassword       string `json:"postgres_password"`
	PostgresDb             string `json:"postgres_db"`
	PostgresSslMode        string `json:"postgres_ssl_mode"`
	PostgresTimezone       string `json:"postgres_timezone"`
	PostgresMaxConnections int32  `json:"postgres_max_connections"`
}

func (q *Queries) UpdateGlobalSettings(ctx context.Context, arg UpdateGlobalSettingsParams) (GlobalSetting, error) {
	row := q.db.QueryRow(ctx, updateGlobalSettings,
		arg.ID,
		arg.Debug,
		arg.TranscodeDir,
		arg.MovieDir,
		arg.MusicDir,
		arg.TvShowsDir,
		arg.StaticDir,
		arg.MaxUserTranscode,
		arg.Ffmpeg,
		arg.Ffprobe,
		arg.TmdbKey,
		arg.RedisHost,
		arg.RedisUser,
		arg.RedisPassword,
		arg.RedisPort,
		arg.DownloadImages,
		arg.PostgresHost,
		arg.PostgresPort,
		arg.PostgresUser,
		arg.PostgresPassword,
		arg.PostgresDb,
		arg.PostgresSslMode,
		arg.PostgresTimezone,
		arg.PostgresMaxConnections,
	)
	var i GlobalSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Debug,
		&i.TranscodeDir,
		&i.MovieDir,
		&i.MusicDir,
		&i.TvShowsDir,
		&i.StaticDir,
		&i.MaxUserTranscode,
		&i.Ffmpeg,
		&i.Ffprobe,
		&i.TmdbKey,
		&i.RedisHost,
		&i.RedisUser,
		&i.RedisPassword,
		&i.RedisPort,
		&i.DownloadImages,
		&i.PostgresHost,
		&i.PostgresPort,
		&i.PostgresUser,
		&i.PostgresPassword,
		&i.PostgresDb,
		&i.PostgresSslMode,
		&i.PostgresTimezone,
		&i.PostgresMaxConnections,
	)
	return i, err
}
