// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: global_settings.sql

package database

import (
	"context"
)

const createSettings = `-- name: CreateSettings :one
INSERT INTO global_settings (
    port,
    debug,
    enable_logger,
    logs_dir,
    enable_watcher,
    movies_dir,
    music_dir,
    tvshows_dir,
    transcode_dir,
    movies_img_dir,
    studios_img_dir,
    artists_img_dir,
    avatar_img_dir,
    static_dir,
    download_images,
    tmdb_api_key,
    ffmpeg_path,
    ffprobe_path,
    enable_hardware_acceleration,
    hardware_acceleration_method,
    jellyfin_token,
    plex_token,
    spotify_client_id,
    spotify_client_secret
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24
)
RETURNING id, created_at, updated_at, port, debug, enable_logger, logs_dir, enable_watcher, movies_dir, music_dir, tvshows_dir, transcode_dir, movies_img_dir, studios_img_dir, artists_img_dir, avatar_img_dir, static_dir, download_images, tmdb_api_key, ffmpeg_path, ffprobe_path, enable_hardware_acceleration, hardware_acceleration_method, jellyfin_token, plex_token, spotify_client_id, spotify_client_secret
`

type CreateSettingsParams struct {
	Port                       int32  `json:"port"`
	Debug                      bool   `json:"debug"`
	EnableLogger               bool   `json:"enable_logger"`
	LogsDir                    string `json:"logs_dir"`
	EnableWatcher              bool   `json:"enable_watcher"`
	MoviesDir                  string `json:"movies_dir"`
	MusicDir                   string `json:"music_dir"`
	TvshowsDir                 string `json:"tvshows_dir"`
	TranscodeDir               string `json:"transcode_dir"`
	MoviesImgDir               string `json:"movies_img_dir"`
	StudiosImgDir              string `json:"studios_img_dir"`
	ArtistsImgDir              string `json:"artists_img_dir"`
	AvatarImgDir               string `json:"avatar_img_dir"`
	StaticDir                  string `json:"static_dir"`
	DownloadImages             bool   `json:"download_images"`
	TmdbApiKey                 string `json:"tmdb_api_key"`
	FfmpegPath                 string `json:"ffmpeg_path"`
	FfprobePath                string `json:"ffprobe_path"`
	EnableHardwareAcceleration bool   `json:"enable_hardware_acceleration"`
	HardwareAccelerationMethod string `json:"hardware_acceleration_method"`
	JellyfinToken              string `json:"jellyfin_token"`
	PlexToken                  string `json:"plex_token"`
	SpotifyClientID            string `json:"spotify_client_id"`
	SpotifyClientSecret        string `json:"spotify_client_secret"`
}

func (q *Queries) CreateSettings(ctx context.Context, arg CreateSettingsParams) (GlobalSetting, error) {
	row := q.db.QueryRow(ctx, createSettings,
		arg.Port,
		arg.Debug,
		arg.EnableLogger,
		arg.LogsDir,
		arg.EnableWatcher,
		arg.MoviesDir,
		arg.MusicDir,
		arg.TvshowsDir,
		arg.TranscodeDir,
		arg.MoviesImgDir,
		arg.StudiosImgDir,
		arg.ArtistsImgDir,
		arg.AvatarImgDir,
		arg.StaticDir,
		arg.DownloadImages,
		arg.TmdbApiKey,
		arg.FfmpegPath,
		arg.FfprobePath,
		arg.EnableHardwareAcceleration,
		arg.HardwareAccelerationMethod,
		arg.JellyfinToken,
		arg.PlexToken,
		arg.SpotifyClientID,
		arg.SpotifyClientSecret,
	)
	var i GlobalSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Port,
		&i.Debug,
		&i.EnableLogger,
		&i.LogsDir,
		&i.EnableWatcher,
		&i.MoviesDir,
		&i.MusicDir,
		&i.TvshowsDir,
		&i.TranscodeDir,
		&i.MoviesImgDir,
		&i.StudiosImgDir,
		&i.ArtistsImgDir,
		&i.AvatarImgDir,
		&i.StaticDir,
		&i.DownloadImages,
		&i.TmdbApiKey,
		&i.FfmpegPath,
		&i.FfprobePath,
		&i.EnableHardwareAcceleration,
		&i.HardwareAccelerationMethod,
		&i.JellyfinToken,
		&i.PlexToken,
		&i.SpotifyClientID,
		&i.SpotifyClientSecret,
	)
	return i, err
}

const getSettings = `-- name: GetSettings :one
SELECT id, created_at, updated_at, port, debug, enable_logger, logs_dir, enable_watcher, movies_dir, music_dir, tvshows_dir, transcode_dir, movies_img_dir, studios_img_dir, artists_img_dir, avatar_img_dir, static_dir, download_images, tmdb_api_key, ffmpeg_path, ffprobe_path, enable_hardware_acceleration, hardware_acceleration_method, jellyfin_token, plex_token, spotify_client_id, spotify_client_secret FROM global_settings LIMIT 1
`

func (q *Queries) GetSettings(ctx context.Context) (GlobalSetting, error) {
	row := q.db.QueryRow(ctx, getSettings)
	var i GlobalSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Port,
		&i.Debug,
		&i.EnableLogger,
		&i.LogsDir,
		&i.EnableWatcher,
		&i.MoviesDir,
		&i.MusicDir,
		&i.TvshowsDir,
		&i.TranscodeDir,
		&i.MoviesImgDir,
		&i.StudiosImgDir,
		&i.ArtistsImgDir,
		&i.AvatarImgDir,
		&i.StaticDir,
		&i.DownloadImages,
		&i.TmdbApiKey,
		&i.FfmpegPath,
		&i.FfprobePath,
		&i.EnableHardwareAcceleration,
		&i.HardwareAccelerationMethod,
		&i.JellyfinToken,
		&i.PlexToken,
		&i.SpotifyClientID,
		&i.SpotifyClientSecret,
	)
	return i, err
}
