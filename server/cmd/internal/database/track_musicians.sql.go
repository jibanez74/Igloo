// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: track_musicians.sql

package database

import (
	"context"
)

const createTrackMusician = `-- name: CreateTrackMusician :exec
INSERT INTO track_musicians (
    track_id, musician_id
) VALUES (
    $1, $2
)
`

type CreateTrackMusicianParams struct {
	TrackID    int32 `json:"track_id"`
	MusicianID int32 `json:"musician_id"`
}

func (q *Queries) CreateTrackMusician(ctx context.Context, arg CreateTrackMusicianParams) error {
	_, err := q.db.Exec(ctx, createTrackMusician, arg.TrackID, arg.MusicianID)
	return err
}

const deleteTrackMusician = `-- name: DeleteTrackMusician :exec
DELETE FROM track_musicians
WHERE track_id = $1 AND musician_id = $2
`

type DeleteTrackMusicianParams struct {
	TrackID    int32 `json:"track_id"`
	MusicianID int32 `json:"musician_id"`
}

func (q *Queries) DeleteTrackMusician(ctx context.Context, arg DeleteTrackMusicianParams) error {
	_, err := q.db.Exec(ctx, deleteTrackMusician, arg.TrackID, arg.MusicianID)
	return err
}

const getMusicianTracks = `-- name: GetMusicianTracks :many
SELECT track_id, musician_id FROM track_musicians
WHERE musician_id = $1
`

func (q *Queries) GetMusicianTracks(ctx context.Context, musicianID int32) ([]TrackMusician, error) {
	rows, err := q.db.Query(ctx, getMusicianTracks, musicianID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrackMusician{}
	for rows.Next() {
		var i TrackMusician
		if err := rows.Scan(&i.TrackID, &i.MusicianID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrackMusicians = `-- name: GetTrackMusicians :many
SELECT track_id, musician_id FROM track_musicians
WHERE track_id = $1
`

func (q *Queries) GetTrackMusicians(ctx context.Context, trackID int32) ([]TrackMusician, error) {
	rows, err := q.db.Query(ctx, getTrackMusicians, trackID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrackMusician{}
	for rows.Next() {
		var i TrackMusician
		if err := rows.Scan(&i.TrackID, &i.MusicianID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
