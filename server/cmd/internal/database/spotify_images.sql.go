// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spotify_images.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSpotifyImage = `-- name: CreateSpotifyImage :one
INSERT INTO spotify_images (
    path,
    width,
    height,
    musician_id,
    album_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, created_at, updated_at, path, width, height, musician_id, album_id
`

type CreateSpotifyImageParams struct {
	Path       string      `json:"path"`
	Width      int32       `json:"width"`
	Height     int32       `json:"height"`
	MusicianID pgtype.Int4 `json:"musician_id"`
	AlbumID    pgtype.Int4 `json:"album_id"`
}

func (q *Queries) CreateSpotifyImage(ctx context.Context, arg CreateSpotifyImageParams) (SpotifyImage, error) {
	row := q.db.QueryRow(ctx, createSpotifyImage,
		arg.Path,
		arg.Width,
		arg.Height,
		arg.MusicianID,
		arg.AlbumID,
	)
	var i SpotifyImage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Path,
		&i.Width,
		&i.Height,
		&i.MusicianID,
		&i.AlbumID,
	)
	return i, err
}

const deleteSpotifyImage = `-- name: DeleteSpotifyImage :exec
DELETE FROM spotify_images 
WHERE id = $1
`

func (q *Queries) DeleteSpotifyImage(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSpotifyImage, id)
	return err
}

const deleteSpotifyImagesByAlbumID = `-- name: DeleteSpotifyImagesByAlbumID :exec
DELETE FROM spotify_images 
WHERE album_id = $1
`

func (q *Queries) DeleteSpotifyImagesByAlbumID(ctx context.Context, albumID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteSpotifyImagesByAlbumID, albumID)
	return err
}

const deleteSpotifyImagesByMusicianID = `-- name: DeleteSpotifyImagesByMusicianID :exec
DELETE FROM spotify_images 
WHERE musician_id = $1
`

func (q *Queries) DeleteSpotifyImagesByMusicianID(ctx context.Context, musicianID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteSpotifyImagesByMusicianID, musicianID)
	return err
}

const getAlbumWithImages = `-- name: GetAlbumWithImages :many
SELECT 
    a.id as album_id,
    a.created_at as album_created_at,
    a.updated_at as album_updated_at,
    a.title as album_title,
    a.spotify_id as album_spotify_id,
    a.release_date as album_release_date,
    a.spotify_popularity as album_spotify_popularity,
    a.total_tracks as album_total_tracks,
    a.total_available_tracks as album_total_available_tracks,
    si.id as image_id,
    si.created_at as image_created_at,
    si.updated_at as image_updated_at,
    si.path as image_path,
    si.width as image_width,
    si.height as image_height
FROM albums a
LEFT JOIN spotify_images si ON a.id = si.album_id
WHERE a.id = $1
ORDER BY si.created_at DESC
`

type GetAlbumWithImagesRow struct {
	AlbumID                   int32              `json:"album_id"`
	AlbumCreatedAt            pgtype.Timestamptz `json:"album_created_at"`
	AlbumUpdatedAt            pgtype.Timestamptz `json:"album_updated_at"`
	AlbumTitle                string             `json:"album_title"`
	AlbumSpotifyID            string             `json:"album_spotify_id"`
	AlbumReleaseDate          pgtype.Date        `json:"album_release_date"`
	AlbumSpotifyPopularity    int32              `json:"album_spotify_popularity"`
	AlbumTotalTracks          int32              `json:"album_total_tracks"`
	AlbumTotalAvailableTracks int32              `json:"album_total_available_tracks"`
	ImageID                   pgtype.Int4        `json:"image_id"`
	ImageCreatedAt            pgtype.Timestamptz `json:"image_created_at"`
	ImageUpdatedAt            pgtype.Timestamptz `json:"image_updated_at"`
	ImagePath                 pgtype.Text        `json:"image_path"`
	ImageWidth                pgtype.Int4        `json:"image_width"`
	ImageHeight               pgtype.Int4        `json:"image_height"`
}

func (q *Queries) GetAlbumWithImages(ctx context.Context, id int32) ([]GetAlbumWithImagesRow, error) {
	rows, err := q.db.Query(ctx, getAlbumWithImages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAlbumWithImagesRow{}
	for rows.Next() {
		var i GetAlbumWithImagesRow
		if err := rows.Scan(
			&i.AlbumID,
			&i.AlbumCreatedAt,
			&i.AlbumUpdatedAt,
			&i.AlbumTitle,
			&i.AlbumSpotifyID,
			&i.AlbumReleaseDate,
			&i.AlbumSpotifyPopularity,
			&i.AlbumTotalTracks,
			&i.AlbumTotalAvailableTracks,
			&i.ImageID,
			&i.ImageCreatedAt,
			&i.ImageUpdatedAt,
			&i.ImagePath,
			&i.ImageWidth,
			&i.ImageHeight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMusicianWithImages = `-- name: GetMusicianWithImages :many
SELECT 
    m.id as musician_id,
    m.created_at as musician_created_at,
    m.updated_at as musician_updated_at,
    m.name as musician_name,
    m.summary as musician_summary,
    m.spotify_id as musician_spotify_id,
    m.spotify_popularity as musician_spotify_popularity,
    m.spotify_followers as musician_spotify_followers,
    si.id as image_id,
    si.created_at as image_created_at,
    si.updated_at as image_updated_at,
    si.path as image_path,
    si.width as image_width,
    si.height as image_height
FROM musicians m
LEFT JOIN spotify_images si ON m.id = si.musician_id
WHERE m.id = $1
ORDER BY si.created_at DESC
`

type GetMusicianWithImagesRow struct {
	MusicianID                int32              `json:"musician_id"`
	MusicianCreatedAt         pgtype.Timestamptz `json:"musician_created_at"`
	MusicianUpdatedAt         pgtype.Timestamptz `json:"musician_updated_at"`
	MusicianName              string             `json:"musician_name"`
	MusicianSummary           string             `json:"musician_summary"`
	MusicianSpotifyID         string             `json:"musician_spotify_id"`
	MusicianSpotifyPopularity int32              `json:"musician_spotify_popularity"`
	MusicianSpotifyFollowers  int32              `json:"musician_spotify_followers"`
	ImageID                   pgtype.Int4        `json:"image_id"`
	ImageCreatedAt            pgtype.Timestamptz `json:"image_created_at"`
	ImageUpdatedAt            pgtype.Timestamptz `json:"image_updated_at"`
	ImagePath                 pgtype.Text        `json:"image_path"`
	ImageWidth                pgtype.Int4        `json:"image_width"`
	ImageHeight               pgtype.Int4        `json:"image_height"`
}

func (q *Queries) GetMusicianWithImages(ctx context.Context, id int32) ([]GetMusicianWithImagesRow, error) {
	rows, err := q.db.Query(ctx, getMusicianWithImages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMusicianWithImagesRow{}
	for rows.Next() {
		var i GetMusicianWithImagesRow
		if err := rows.Scan(
			&i.MusicianID,
			&i.MusicianCreatedAt,
			&i.MusicianUpdatedAt,
			&i.MusicianName,
			&i.MusicianSummary,
			&i.MusicianSpotifyID,
			&i.MusicianSpotifyPopularity,
			&i.MusicianSpotifyFollowers,
			&i.ImageID,
			&i.ImageCreatedAt,
			&i.ImageUpdatedAt,
			&i.ImagePath,
			&i.ImageWidth,
			&i.ImageHeight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpotifyImageByID = `-- name: GetSpotifyImageByID :one
SELECT id, created_at, updated_at, path, width, height, musician_id, album_id 
FROM spotify_images 
WHERE id = $1
`

func (q *Queries) GetSpotifyImageByID(ctx context.Context, id int32) (SpotifyImage, error) {
	row := q.db.QueryRow(ctx, getSpotifyImageByID, id)
	var i SpotifyImage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Path,
		&i.Width,
		&i.Height,
		&i.MusicianID,
		&i.AlbumID,
	)
	return i, err
}

const getSpotifyImagesByAlbumID = `-- name: GetSpotifyImagesByAlbumID :many
SELECT id, created_at, updated_at, path, width, height, musician_id, album_id 
FROM spotify_images 
WHERE album_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetSpotifyImagesByAlbumID(ctx context.Context, albumID pgtype.Int4) ([]SpotifyImage, error) {
	rows, err := q.db.Query(ctx, getSpotifyImagesByAlbumID, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SpotifyImage{}
	for rows.Next() {
		var i SpotifyImage
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Path,
			&i.Width,
			&i.Height,
			&i.MusicianID,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpotifyImagesByMusicianID = `-- name: GetSpotifyImagesByMusicianID :many
SELECT id, created_at, updated_at, path, width, height, musician_id, album_id 
FROM spotify_images 
WHERE musician_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetSpotifyImagesByMusicianID(ctx context.Context, musicianID pgtype.Int4) ([]SpotifyImage, error) {
	rows, err := q.db.Query(ctx, getSpotifyImagesByMusicianID, musicianID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SpotifyImage{}
	for rows.Next() {
		var i SpotifyImage
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Path,
			&i.Width,
			&i.Height,
			&i.MusicianID,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpotifyImages = `-- name: ListSpotifyImages :many
SELECT id, created_at, updated_at, path, width, height, musician_id, album_id 
FROM spotify_images 
ORDER BY created_at DESC
`

func (q *Queries) ListSpotifyImages(ctx context.Context) ([]SpotifyImage, error) {
	rows, err := q.db.Query(ctx, listSpotifyImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SpotifyImage{}
	for rows.Next() {
		var i SpotifyImage
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Path,
			&i.Width,
			&i.Height,
			&i.MusicianID,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpotifyImage = `-- name: UpdateSpotifyImage :one
UPDATE spotify_images 
SET 
    path = $2,
    width = $3,
    height = $4,
    musician_id = $5,
    album_id = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, created_at, updated_at, path, width, height, musician_id, album_id
`

type UpdateSpotifyImageParams struct {
	ID         int32       `json:"id"`
	Path       string      `json:"path"`
	Width      int32       `json:"width"`
	Height     int32       `json:"height"`
	MusicianID pgtype.Int4 `json:"musician_id"`
	AlbumID    pgtype.Int4 `json:"album_id"`
}

func (q *Queries) UpdateSpotifyImage(ctx context.Context, arg UpdateSpotifyImageParams) (SpotifyImage, error) {
	row := q.db.QueryRow(ctx, updateSpotifyImage,
		arg.ID,
		arg.Path,
		arg.Width,
		arg.Height,
		arg.MusicianID,
		arg.AlbumID,
	)
	var i SpotifyImage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Path,
		&i.Width,
		&i.Height,
		&i.MusicianID,
		&i.AlbumID,
	)
	return i, err
}
