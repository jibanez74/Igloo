// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spotify_images.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const upsertSpotifyImage = `-- name: UpsertSpotifyImage :one
INSERT INTO spotify_images (
    path,
    width,
    height,
    musician_id,
    album_id
) VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT (path) DO UPDATE SET
    musician_id = EXCLUDED.musician_id,
    album_id = EXCLUDED.album_id,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, created_at, updated_at, path, width, height, musician_id, album_id
`

type UpsertSpotifyImageParams struct {
	Path       string      `json:"path"`
	Width      int32       `json:"width"`
	Height     int32       `json:"height"`
	MusicianID pgtype.Int4 `json:"musician_id"`
	AlbumID    pgtype.Int4 `json:"album_id"`
}

func (q *Queries) UpsertSpotifyImage(ctx context.Context, arg UpsertSpotifyImageParams) (SpotifyImage, error) {
	row := q.db.QueryRow(ctx, upsertSpotifyImage,
		arg.Path,
		arg.Width,
		arg.Height,
		arg.MusicianID,
		arg.AlbumID,
	)
	var i SpotifyImage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Path,
		&i.Width,
		&i.Height,
		&i.MusicianID,
		&i.AlbumID,
	)
	return i, err
}
