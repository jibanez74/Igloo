// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spotify_images.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkSpotifyImageExists = `-- name: CheckSpotifyImageExists :one
SELECT EXISTS(
    SELECT 1 FROM spotify_images WHERE path = $1
)
`

func (q *Queries) CheckSpotifyImageExists(ctx context.Context, path string) (bool, error) {
	row := q.db.QueryRow(ctx, checkSpotifyImageExists, path)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createSpotifyImage = `-- name: CreateSpotifyImage :one
INSERT INTO spotify_images (
    path,
    width,
    height,
    musician_id,
    album_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, created_at, updated_at, path, width, height, musician_id, album_id
`

type CreateSpotifyImageParams struct {
	Path       string      `json:"path"`
	Width      int32       `json:"width"`
	Height     int32       `json:"height"`
	MusicianID pgtype.Int4 `json:"musician_id"`
	AlbumID    pgtype.Int4 `json:"album_id"`
}

func (q *Queries) CreateSpotifyImage(ctx context.Context, arg CreateSpotifyImageParams) (SpotifyImage, error) {
	row := q.db.QueryRow(ctx, createSpotifyImage,
		arg.Path,
		arg.Width,
		arg.Height,
		arg.MusicianID,
		arg.AlbumID,
	)
	var i SpotifyImage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Path,
		&i.Width,
		&i.Height,
		&i.MusicianID,
		&i.AlbumID,
	)
	return i, err
}

const getSpotifyImageByPath = `-- name: GetSpotifyImageByPath :one
SELECT id, created_at, updated_at, path, width, height, musician_id, album_id
FROM spotify_images
WHERE path = $1
`

func (q *Queries) GetSpotifyImageByPath(ctx context.Context, path string) (SpotifyImage, error) {
	row := q.db.QueryRow(ctx, getSpotifyImageByPath, path)
	var i SpotifyImage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Path,
		&i.Width,
		&i.Height,
		&i.MusicianID,
		&i.AlbumID,
	)
	return i, err
}

const updateSpotifyImageRelations = `-- name: UpdateSpotifyImageRelations :exec
UPDATE spotify_images 
SET 
    musician_id = $2,
    album_id = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE path = $1
`

type UpdateSpotifyImageRelationsParams struct {
	Path       string      `json:"path"`
	MusicianID pgtype.Int4 `json:"musician_id"`
	AlbumID    pgtype.Int4 `json:"album_id"`
}

func (q *Queries) UpdateSpotifyImageRelations(ctx context.Context, arg UpdateSpotifyImageRelationsParams) error {
	_, err := q.db.Exec(ctx, updateSpotifyImageRelations, arg.Path, arg.MusicianID, arg.AlbumID)
	return err
}
