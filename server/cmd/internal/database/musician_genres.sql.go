// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: musician_genres.sql

package database

import (
	"context"
)

const createMusicianGenre = `-- name: CreateMusicianGenre :exec
INSERT INTO musician_genres (
    musician_id, genre_id
) VALUES (
    $1, $2
)
`

type CreateMusicianGenreParams struct {
	MusicianID int32 `json:"musician_id"`
	GenreID    int32 `json:"genre_id"`
}

func (q *Queries) CreateMusicianGenre(ctx context.Context, arg CreateMusicianGenreParams) error {
	_, err := q.db.Exec(ctx, createMusicianGenre, arg.MusicianID, arg.GenreID)
	return err
}

const deleteMusicianGenre = `-- name: DeleteMusicianGenre :exec
DELETE FROM musician_genres
WHERE musician_id = $1 AND genre_id = $2
`

type DeleteMusicianGenreParams struct {
	MusicianID int32 `json:"musician_id"`
	GenreID    int32 `json:"genre_id"`
}

func (q *Queries) DeleteMusicianGenre(ctx context.Context, arg DeleteMusicianGenreParams) error {
	_, err := q.db.Exec(ctx, deleteMusicianGenre, arg.MusicianID, arg.GenreID)
	return err
}

const getGenreMusicians = `-- name: GetGenreMusicians :many
SELECT musician_id, genre_id FROM musician_genres
WHERE genre_id = $1
`

func (q *Queries) GetGenreMusicians(ctx context.Context, genreID int32) ([]MusicianGenre, error) {
	rows, err := q.db.Query(ctx, getGenreMusicians, genreID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MusicianGenre{}
	for rows.Next() {
		var i MusicianGenre
		if err := rows.Scan(&i.MusicianID, &i.GenreID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMusicianGenres = `-- name: GetMusicianGenres :many
SELECT musician_id, genre_id FROM musician_genres
WHERE musician_id = $1
`

func (q *Queries) GetMusicianGenres(ctx context.Context, musicianID int32) ([]MusicianGenre, error) {
	rows, err := q.db.Query(ctx, getMusicianGenres, musicianID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MusicianGenre{}
	for rows.Next() {
		var i MusicianGenre
		if err := rows.Scan(&i.MusicianID, &i.GenreID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
