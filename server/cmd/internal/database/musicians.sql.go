// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: musicians.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMusician = `-- name: CreateMusician :one
INSERT INTO musicians (
    name,
    sort_name,
    spotify_id,
    spotify_popularity,
    spotify_followers,
    summary,
    thumb
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, created_at, updated_at, name, sort_name, summary, spotify_id, spotify_popularity, spotify_followers, thumb
`

type CreateMusicianParams struct {
	Name              string      `json:"name"`
	SortName          string      `json:"sort_name"`
	SpotifyID         pgtype.Text `json:"spotify_id"`
	SpotifyPopularity int32       `json:"spotify_popularity"`
	SpotifyFollowers  int32       `json:"spotify_followers"`
	Summary           pgtype.Text `json:"summary"`
	Thumb             pgtype.Text `json:"thumb"`
}

func (q *Queries) CreateMusician(ctx context.Context, arg CreateMusicianParams) (Musician, error) {
	row := q.db.QueryRow(ctx, createMusician,
		arg.Name,
		arg.SortName,
		arg.SpotifyID,
		arg.SpotifyPopularity,
		arg.SpotifyFollowers,
		arg.Summary,
		arg.Thumb,
	)
	var i Musician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.SortName,
		&i.Summary,
		&i.SpotifyID,
		&i.SpotifyPopularity,
		&i.SpotifyFollowers,
		&i.Thumb,
	)
	return i, err
}

const getMusicianByID = `-- name: GetMusicianByID :one
SELECT id, created_at, updated_at, name, sort_name, summary, spotify_id, spotify_popularity, spotify_followers, thumb FROM musicians WHERE id = $1 ORDER BY sort_name
`

func (q *Queries) GetMusicianByID(ctx context.Context, id int32) (Musician, error) {
	row := q.db.QueryRow(ctx, getMusicianByID, id)
	var i Musician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.SortName,
		&i.Summary,
		&i.SpotifyID,
		&i.SpotifyPopularity,
		&i.SpotifyFollowers,
		&i.Thumb,
	)
	return i, err
}

const getMusicianByName = `-- name: GetMusicianByName :one
SELECT id, created_at, updated_at, name, sort_name, summary, spotify_id, spotify_popularity, spotify_followers, thumb FROM musicians WHERE name = $1
`

func (q *Queries) GetMusicianByName(ctx context.Context, name string) (Musician, error) {
	row := q.db.QueryRow(ctx, getMusicianByName, name)
	var i Musician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.SortName,
		&i.Summary,
		&i.SpotifyID,
		&i.SpotifyPopularity,
		&i.SpotifyFollowers,
		&i.Thumb,
	)
	return i, err
}

const getMusicianBySpotifyID = `-- name: GetMusicianBySpotifyID :one
SELECT id, created_at, updated_at, name, sort_name, summary, spotify_id, spotify_popularity, spotify_followers, thumb FROM musicians WHERE spotify_id = $1
`

func (q *Queries) GetMusicianBySpotifyID(ctx context.Context, spotifyID pgtype.Text) (Musician, error) {
	row := q.db.QueryRow(ctx, getMusicianBySpotifyID, spotifyID)
	var i Musician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.SortName,
		&i.Summary,
		&i.SpotifyID,
		&i.SpotifyPopularity,
		&i.SpotifyFollowers,
		&i.Thumb,
	)
	return i, err
}

const getMusicianCount = `-- name: GetMusicianCount :one
SELECT COUNT(*) FROM musicians
`

func (q *Queries) GetMusicianCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getMusicianCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMusicianList = `-- name: GetMusicianList :many
SELECT id, name, sort_name FROM musicians ORDER BY sort_name ASC
`

type GetMusicianListRow struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	SortName string `json:"sort_name"`
}

func (q *Queries) GetMusicianList(ctx context.Context) ([]GetMusicianListRow, error) {
	rows, err := q.db.Query(ctx, getMusicianList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMusicianListRow{}
	for rows.Next() {
		var i GetMusicianListRow
		if err := rows.Scan(&i.ID, &i.Name, &i.SortName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
