// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: musicians.sql

package database

import (
	"context"
)

const checkMusicianExistsBySpotifyID = `-- name: CheckMusicianExistsBySpotifyID :one
SELECT EXISTS(
    SELECT 1 FROM musicians WHERE spotify_id = $1
) as exists
`

func (q *Queries) CheckMusicianExistsBySpotifyID(ctx context.Context, spotifyID string) (bool, error) {
	row := q.db.QueryRow(ctx, checkMusicianExistsBySpotifyID, spotifyID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createMusician = `-- name: CreateMusician :one
INSERT INTO musicians (
    name,
    sort_name,
    spotify_id,
    spotify_popularity,
    spotify_followers,
    summary,
    thumb
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, created_at, updated_at, name, sort_name, summary, spotify_id, spotify_popularity, spotify_followers, thumb
`

type CreateMusicianParams struct {
	Name              string `json:"name"`
	SortName          string `json:"sort_name"`
	SpotifyID         string `json:"spotify_id"`
	SpotifyPopularity int32  `json:"spotify_popularity"`
	SpotifyFollowers  int32  `json:"spotify_followers"`
	Summary           string `json:"summary"`
	Thumb             string `json:"thumb"`
}

func (q *Queries) CreateMusician(ctx context.Context, arg CreateMusicianParams) (Musician, error) {
	row := q.db.QueryRow(ctx, createMusician,
		arg.Name,
		arg.SortName,
		arg.SpotifyID,
		arg.SpotifyPopularity,
		arg.SpotifyFollowers,
		arg.Summary,
		arg.Thumb,
	)
	var i Musician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.SortName,
		&i.Summary,
		&i.SpotifyID,
		&i.SpotifyPopularity,
		&i.SpotifyFollowers,
		&i.Thumb,
	)
	return i, err
}

const getMusicianBySpotifyID = `-- name: GetMusicianBySpotifyID :one
SELECT id, created_at, updated_at, name, sort_name, summary, spotify_id, spotify_popularity, spotify_followers, thumb FROM musicians WHERE spotify_id = $1
`

func (q *Queries) GetMusicianBySpotifyID(ctx context.Context, spotifyID string) (Musician, error) {
	row := q.db.QueryRow(ctx, getMusicianBySpotifyID, spotifyID)
	var i Musician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.SortName,
		&i.Summary,
		&i.SpotifyID,
		&i.SpotifyPopularity,
		&i.SpotifyFollowers,
		&i.Thumb,
	)
	return i, err
}
