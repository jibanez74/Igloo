// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: musicians.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkMusicianExistsBySpotifyID = `-- name: CheckMusicianExistsBySpotifyID :one
SELECT EXISTS(
    SELECT 1 FROM musicians WHERE spotify_id = $1
) as exists
`

func (q *Queries) CheckMusicianExistsBySpotifyID(ctx context.Context, spotifyID string) (bool, error) {
	row := q.db.QueryRow(ctx, checkMusicianExistsBySpotifyID, spotifyID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createMusician = `-- name: CreateMusician :one
INSERT INTO musicians (
    name,
    spotify_id,
    spotify_popularity,
    spotify_followers,
    summary
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, name, summary, spotify_id, spotify_popularity, spotify_followers
`

type CreateMusicianParams struct {
	Name              string `json:"name"`
	SpotifyID         string `json:"spotify_id"`
	SpotifyPopularity int32  `json:"spotify_popularity"`
	SpotifyFollowers  int32  `json:"spotify_followers"`
	Summary           string `json:"summary"`
}

func (q *Queries) CreateMusician(ctx context.Context, arg CreateMusicianParams) (Musician, error) {
	row := q.db.QueryRow(ctx, createMusician,
		arg.Name,
		arg.SpotifyID,
		arg.SpotifyPopularity,
		arg.SpotifyFollowers,
		arg.Summary,
	)
	var i Musician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Summary,
		&i.SpotifyID,
		&i.SpotifyPopularity,
		&i.SpotifyFollowers,
	)
	return i, err
}

const getAllMusiciansWithImages = `-- name: GetAllMusiciansWithImages :many
SELECT 
    m.id, 
    m.name,
    si.id as image_id, 
    si.path as image_path, 
    si.width as image_width, 
    si.height as image_height
FROM musicians m
LEFT JOIN spotify_images si ON m.id = si.musician_id
ORDER BY m.name ASC
`

type GetAllMusiciansWithImagesRow struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	ImageID     pgtype.Int4 `json:"image_id"`
	ImagePath   pgtype.Text `json:"image_path"`
	ImageWidth  pgtype.Int4 `json:"image_width"`
	ImageHeight pgtype.Int4 `json:"image_height"`
}

func (q *Queries) GetAllMusiciansWithImages(ctx context.Context) ([]GetAllMusiciansWithImagesRow, error) {
	rows, err := q.db.Query(ctx, getAllMusiciansWithImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllMusiciansWithImagesRow{}
	for rows.Next() {
		var i GetAllMusiciansWithImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageID,
			&i.ImagePath,
			&i.ImageWidth,
			&i.ImageHeight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMusicianBySpotifyID = `-- name: GetMusicianBySpotifyID :one
SELECT id, created_at, updated_at, name, summary, spotify_id, spotify_popularity, spotify_followers FROM musicians WHERE spotify_id = $1
`

func (q *Queries) GetMusicianBySpotifyID(ctx context.Context, spotifyID string) (Musician, error) {
	row := q.db.QueryRow(ctx, getMusicianBySpotifyID, spotifyID)
	var i Musician
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Summary,
		&i.SpotifyID,
		&i.SpotifyPopularity,
		&i.SpotifyFollowers,
	)
	return i, err
}

const getMusiciansCount = `-- name: GetMusiciansCount :one
SELECT COUNT(*) FROM musicians
`

func (q *Queries) GetMusiciansCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getMusiciansCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
