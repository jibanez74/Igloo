// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: genres.sql

package database

import (
	"context"
)

const createGenre = `-- name: CreateGenre :one
INSERT INTO genres (
  tag,
  genre_type
) VALUES (
  $1, $2
)
RETURNING id, created_at, updated_at, tag, genre_type
`

type CreateGenreParams struct {
	Tag       string `json:"tag"`
	GenreType string `json:"genre_type"`
}

func (q *Queries) CreateGenre(ctx context.Context, arg CreateGenreParams) (Genre, error) {
	row := q.db.QueryRow(ctx, createGenre, arg.Tag, arg.GenreType)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.GenreType,
	)
	return i, err
}

const getGenreByTagAndType = `-- name: GetGenreByTagAndType :one
SELECT id, created_at, updated_at, tag, genre_type FROM genres WHERE tag = $1 AND genre_type = $2
`

type GetGenreByTagAndTypeParams struct {
	Tag       string `json:"tag"`
	GenreType string `json:"genre_type"`
}

func (q *Queries) GetGenreByTagAndType(ctx context.Context, arg GetGenreByTagAndTypeParams) (Genre, error) {
	row := q.db.QueryRow(ctx, getGenreByTagAndType, arg.Tag, arg.GenreType)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.GenreType,
	)
	return i, err
}
