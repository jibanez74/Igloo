// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: genres.sql

package database

import (
	"context"
)

const getGenreByTag = `-- name: GetGenreByTag :one
SELECT id, created_at, updated_at, tag, genre_type
FROM genres
WHERE tag = $1
`

func (q *Queries) GetGenreByTag(ctx context.Context, tag string) (Genre, error) {
	row := q.db.QueryRow(ctx, getGenreByTag, tag)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.GenreType,
	)
	return i, err
}

const getUnknownGenre = `-- name: GetUnknownGenre :one
SELECT id, created_at, updated_at, tag, genre_type
FROM genres
WHERE tag = 'unknown'
`

func (q *Queries) GetUnknownGenre(ctx context.Context) (Genre, error) {
	row := q.db.QueryRow(ctx, getUnknownGenre)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.GenreType,
	)
	return i, err
}

const upsertGenre = `-- name: UpsertGenre :one
INSERT INTO genres (tag, genre_type)
VALUES ($1, $2)
ON CONFLICT (tag) DO UPDATE SET tag = genres.tag
RETURNING id, created_at, updated_at, tag, genre_type
`

type UpsertGenreParams struct {
	Tag       string `json:"tag"`
	GenreType string `json:"genre_type"`
}

func (q *Queries) UpsertGenre(ctx context.Context, arg UpsertGenreParams) (Genre, error) {
	row := q.db.QueryRow(ctx, upsertGenre, arg.Tag, arg.GenreType)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.GenreType,
	)
	return i, err
}
