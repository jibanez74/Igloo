// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: albums.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkAlbumExistsBySpotifyID = `-- name: CheckAlbumExistsBySpotifyID :one
SELECT EXISTS(
    SELECT 1 FROM albums WHERE spotify_id = $1
) as exists
`

func (q *Queries) CheckAlbumExistsBySpotifyID(ctx context.Context, spotifyID pgtype.Text) (bool, error) {
	row := q.db.QueryRow(ctx, checkAlbumExistsBySpotifyID, spotifyID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (
    title,
    sort_title,
    directory_path,
    spotify_id,
    release_date,
    year,
    spotify_popularity,
    total_tracks,
    total_available_tracks,
    cover,
    musician_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, created_at, updated_at, title, sort_title, directory_path, spotify_id, release_date, year, spotify_popularity, total_tracks, total_available_tracks, cover, musician_id
`

type CreateAlbumParams struct {
	Title                string      `json:"title"`
	SortTitle            string      `json:"sort_title"`
	DirectoryPath        string      `json:"directory_path"`
	SpotifyID            pgtype.Text `json:"spotify_id"`
	ReleaseDate          pgtype.Date `json:"release_date"`
	Year                 pgtype.Int4 `json:"year"`
	SpotifyPopularity    pgtype.Int4 `json:"spotify_popularity"`
	TotalTracks          int32       `json:"total_tracks"`
	TotalAvailableTracks int32       `json:"total_available_tracks"`
	Cover                pgtype.Text `json:"cover"`
	MusicianID           pgtype.Int4 `json:"musician_id"`
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRow(ctx, createAlbum,
		arg.Title,
		arg.SortTitle,
		arg.DirectoryPath,
		arg.SpotifyID,
		arg.ReleaseDate,
		arg.Year,
		arg.SpotifyPopularity,
		arg.TotalTracks,
		arg.TotalAvailableTracks,
		arg.Cover,
		arg.MusicianID,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.DirectoryPath,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
		&i.Cover,
		&i.MusicianID,
	)
	return i, err
}

const getAlbumByPathAndTitle = `-- name: GetAlbumByPathAndTitle :one
SELECT id, created_at, updated_at, title, sort_title, directory_path, spotify_id, release_date, year, spotify_popularity, total_tracks, total_available_tracks, cover, musician_id FROM albums WHERE directory_path = $1 AND title = $2
`

type GetAlbumByPathAndTitleParams struct {
	DirectoryPath string `json:"directory_path"`
	Title         string `json:"title"`
}

func (q *Queries) GetAlbumByPathAndTitle(ctx context.Context, arg GetAlbumByPathAndTitleParams) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumByPathAndTitle, arg.DirectoryPath, arg.Title)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.DirectoryPath,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
		&i.Cover,
		&i.MusicianID,
	)
	return i, err
}

const getAlbumBySpotifyID = `-- name: GetAlbumBySpotifyID :one
SELECT id, created_at, updated_at, title, sort_title, directory_path, spotify_id, release_date, year, spotify_popularity, total_tracks, total_available_tracks, cover, musician_id FROM albums WHERE spotify_id = $1 LIMIT 1
`

func (q *Queries) GetAlbumBySpotifyID(ctx context.Context, spotifyID pgtype.Text) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumBySpotifyID, spotifyID)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.DirectoryPath,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
		&i.Cover,
		&i.MusicianID,
	)
	return i, err
}

const getAlbumByTitle = `-- name: GetAlbumByTitle :one
SELECT id, created_at, updated_at, title, sort_title, directory_path, spotify_id, release_date, year, spotify_popularity, total_tracks, total_available_tracks, cover, musician_id FROM albums Where title = $1
`

func (q *Queries) GetAlbumByTitle(ctx context.Context, title string) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumByTitle, title)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.DirectoryPath,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
		&i.Cover,
		&i.MusicianID,
	)
	return i, err
}

const getAlbumCount = `-- name: GetAlbumCount :one
SELECT COUNT(*) FROM albums
`

func (q *Queries) GetAlbumCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAlbumCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAlbumDetails = `-- name: GetAlbumDetails :one
WITH album_base AS (
    SELECT a.id, a.created_at, a.updated_at, a.title, a.sort_title, a.directory_path, a.spotify_id, a.release_date, a.year, a.spotify_popularity, a.total_tracks, a.total_available_tracks, a.cover, a.musician_id
    FROM albums a
    WHERE a.id = $1
),
album_musician AS (
    SELECT COALESCE(
        jsonb_build_object(
            'id', m.id,
            'name', m.name,
            'sort_name', m.sort_name,
            'spotify_id', m.spotify_id,
            'spotify_popularity', m.spotify_popularity,
            'thumb', m.thumb
        ), 'null'
    ) as musician
    FROM album_base a
    LEFT JOIN musicians m ON m.id = a.musician_id
),
album_genres AS (
    SELECT COALESCE(
        json_agg(DISTINCT jsonb_build_object(
            'id', g.id,
            'tag', g.tag
        )) FILTER (WHERE g.id IS NOT NULL), '[]'
    ) as genres
    FROM album_base a
    LEFT JOIN album_genres ag ON ag.album_id = a.id
    LEFT JOIN genres g ON g.id = ag.genre_id
),
album_tracks AS (
    SELECT COALESCE(
        json_agg(
            jsonb_build_object(
                'id', t.id,
                'title', t.title,
                'sort_title', t.sort_title,
                'track_index', t.track_index,
                'duration', t.duration,
                'composer', t.composer,
                'release_date', t.release_date,
                'file_path', t.file_path,
                'container', t.container,
                'codec', t.codec,
                'bit_rate', t.bit_rate,
                'channel_layout', t.channel_layout,
                'copyright', t.copyright,
                'size', t.size,
                'file_name', t.file_name,
                'disc', t.disc,
                'language', t.language,
                'profile', t.profile,
                'sample_rate', t.sample_rate,
                'genres', COALESCE(
                    (SELECT json_agg(DISTINCT jsonb_build_object(
                        'id', tg_genre.id,
                        'tag', tg_genre.tag
                    )) FROM track_genres tg 
                     JOIN genres tg_genre ON tg_genre.id = tg.genre_id 
                     WHERE tg.track_id = t.id), '[]'
                )
            )
            ORDER BY t.disc, t.track_index
        ) FILTER (WHERE t.id IS NOT NULL), '[]'
    ) as tracks
    FROM album_base a
    LEFT JOIN tracks t ON t.album_id = a.id
)
SELECT 
    a.id, a.created_at, a.updated_at, a.title, a.sort_title, a.directory_path, a.spotify_id, a.release_date, a.year, a.spotify_popularity, a.total_tracks, a.total_available_tracks, a.cover, a.musician_id,
    m.musician,
    g.genres,
    t.tracks
FROM album_base a
CROSS JOIN album_musician m
CROSS JOIN album_genres g
CROSS JOIN album_tracks t
`

type GetAlbumDetailsRow struct {
	ID                   int32              `json:"id"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	Title                string             `json:"title"`
	SortTitle            string             `json:"sort_title"`
	DirectoryPath        string             `json:"directory_path"`
	SpotifyID            pgtype.Text        `json:"spotify_id"`
	ReleaseDate          pgtype.Date        `json:"release_date"`
	Year                 pgtype.Int4        `json:"year"`
	SpotifyPopularity    pgtype.Int4        `json:"spotify_popularity"`
	TotalTracks          int32              `json:"total_tracks"`
	TotalAvailableTracks int32              `json:"total_available_tracks"`
	Cover                pgtype.Text        `json:"cover"`
	MusicianID           pgtype.Int4        `json:"musician_id"`
	Musician             interface{}        `json:"musician"`
	Genres               interface{}        `json:"genres"`
	Tracks               interface{}        `json:"tracks"`
}

func (q *Queries) GetAlbumDetails(ctx context.Context, id int32) (GetAlbumDetailsRow, error) {
	row := q.db.QueryRow(ctx, getAlbumDetails, id)
	var i GetAlbumDetailsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.DirectoryPath,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
		&i.Cover,
		&i.MusicianID,
		&i.Musician,
		&i.Genres,
		&i.Tracks,
	)
	return i, err
}

const getAlbumsPaginated = `-- name: GetAlbumsPaginated :many
SELECT 
    a.id,
    a.title,
    a.cover,
    m.name as musician_name
FROM albums a
LEFT JOIN musicians m ON m.id = a.musician_id
ORDER BY a.sort_title ASC
LIMIT $1 OFFSET $2
`

type GetAlbumsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAlbumsPaginatedRow struct {
	ID           int32       `json:"id"`
	Title        string      `json:"title"`
	Cover        pgtype.Text `json:"cover"`
	MusicianName pgtype.Text `json:"musician_name"`
}

func (q *Queries) GetAlbumsPaginated(ctx context.Context, arg GetAlbumsPaginatedParams) ([]GetAlbumsPaginatedRow, error) {
	rows, err := q.db.Query(ctx, getAlbumsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAlbumsPaginatedRow{}
	for rows.Next() {
		var i GetAlbumsPaginatedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.MusicianName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestAlbums = `-- name: GetLatestAlbums :many
SELECT DISTINCT ON (a.title)
    a.title,
    a.cover,
    m.name as musician_name,
    a.year
FROM albums a
LEFT JOIN musicians m ON m.id = a.musician_id
ORDER BY a.title, a.created_at DESC
LIMIT 12
`

type GetLatestAlbumsRow struct {
	Title        string      `json:"title"`
	Cover        pgtype.Text `json:"cover"`
	MusicianName pgtype.Text `json:"musician_name"`
	Year         pgtype.Int4 `json:"year"`
}

func (q *Queries) GetLatestAlbums(ctx context.Context) ([]GetLatestAlbumsRow, error) {
	rows, err := q.db.Query(ctx, getLatestAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLatestAlbumsRow{}
	for rows.Next() {
		var i GetLatestAlbumsRow
		if err := rows.Scan(
			&i.Title,
			&i.Cover,
			&i.MusicianName,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlbumTotalAvailableTracks = `-- name: UpdateAlbumTotalAvailableTracks :exec
UPDATE albums 
SET total_available_tracks = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateAlbumTotalAvailableTracksParams struct {
	ID                   int32 `json:"id"`
	TotalAvailableTracks int32 `json:"total_available_tracks"`
}

func (q *Queries) UpdateAlbumTotalAvailableTracks(ctx context.Context, arg UpdateAlbumTotalAvailableTracksParams) error {
	_, err := q.db.Exec(ctx, updateAlbumTotalAvailableTracks, arg.ID, arg.TotalAvailableTracks)
	return err
}
