// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: albums.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAlbumBySpotifyID = `-- name: GetAlbumBySpotifyID :one
SELECT id, created_at, updated_at, title, spotify_id, release_date, spotify_popularity, total_tracks, total_available_tracks 
FROM albums 
WHERE spotify_id = $1 
LIMIT 1
`

type GetAlbumBySpotifyIDRow struct {
	ID                   int32              `json:"id"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	Title                string             `json:"title"`
	SpotifyID            string             `json:"spotify_id"`
	ReleaseDate          pgtype.Date        `json:"release_date"`
	SpotifyPopularity    int32              `json:"spotify_popularity"`
	TotalTracks          int32              `json:"total_tracks"`
	TotalAvailableTracks int32              `json:"total_available_tracks"`
}

func (q *Queries) GetAlbumBySpotifyID(ctx context.Context, spotifyID string) (GetAlbumBySpotifyIDRow, error) {
	row := q.db.QueryRow(ctx, getAlbumBySpotifyID, spotifyID)
	var i GetAlbumBySpotifyIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
	)
	return i, err
}

const getAlbumsCount = `-- name: GetAlbumsCount :one
SELECT COUNT(*) as total_albums FROM albums
`

func (q *Queries) GetAlbumsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAlbumsCount)
	var total_albums int64
	err := row.Scan(&total_albums)
	return total_albums, err
}

const getAllAlbums = `-- name: GetAllAlbums :many
SELECT 
    a.id, a.title, a.release_date,
    si.id as image_id, si.path as image_path, si.width as image_width, si.height as image_height
FROM albums a
LEFT JOIN spotify_images si ON a.id = si.album_id
ORDER BY a.title ASC
`

type GetAllAlbumsRow struct {
	ID          int32       `json:"id"`
	Title       string      `json:"title"`
	ReleaseDate pgtype.Date `json:"release_date"`
	ImageID     pgtype.Int4 `json:"image_id"`
	ImagePath   pgtype.Text `json:"image_path"`
	ImageWidth  pgtype.Int4 `json:"image_width"`
	ImageHeight pgtype.Int4 `json:"image_height"`
}

func (q *Queries) GetAllAlbums(ctx context.Context) ([]GetAllAlbumsRow, error) {
	rows, err := q.db.Query(ctx, getAllAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAlbumsRow{}
	for rows.Next() {
		var i GetAllAlbumsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ReleaseDate,
			&i.ImageID,
			&i.ImagePath,
			&i.ImageWidth,
			&i.ImageHeight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrCreateAlbumByTitle = `-- name: GetOrCreateAlbumByTitle :one
WITH existing_album AS (
    SELECT a.id, a.created_at, a.updated_at, a.title, a.spotify_id, a.release_date, a.spotify_popularity, a.total_tracks, a.total_available_tracks
    FROM albums a
    WHERE a.title = $1
    LIMIT 1
), new_album AS (
    INSERT INTO albums (
        title,
        spotify_id,
        release_date,
        spotify_popularity,
        total_tracks,
        total_available_tracks
    )
    SELECT $1, $2, $3, $4, $5, $6
    WHERE NOT EXISTS (SELECT 1 FROM existing_album)
    RETURNING id, created_at, updated_at, title, spotify_id, release_date, spotify_popularity, total_tracks, total_available_tracks
)
SELECT e.id, e.created_at, e.updated_at, e.title, e.spotify_id, e.release_date, e.spotify_popularity, e.total_tracks, e.total_available_tracks
FROM existing_album e
UNION ALL
SELECT n.id, n.created_at, n.updated_at, n.title, n.spotify_id, n.release_date, n.spotify_popularity, n.total_tracks, n.total_available_tracks
FROM new_album n
`

type GetOrCreateAlbumByTitleParams struct {
	Title                string      `json:"title"`
	SpotifyID            string      `json:"spotify_id"`
	ReleaseDate          pgtype.Date `json:"release_date"`
	SpotifyPopularity    int32       `json:"spotify_popularity"`
	TotalTracks          int32       `json:"total_tracks"`
	TotalAvailableTracks int32       `json:"total_available_tracks"`
}

type GetOrCreateAlbumByTitleRow struct {
	ID                   int32              `json:"id"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	Title                string             `json:"title"`
	SpotifyID            string             `json:"spotify_id"`
	ReleaseDate          pgtype.Date        `json:"release_date"`
	SpotifyPopularity    int32              `json:"spotify_popularity"`
	TotalTracks          int32              `json:"total_tracks"`
	TotalAvailableTracks int32              `json:"total_available_tracks"`
}

func (q *Queries) GetOrCreateAlbumByTitle(ctx context.Context, arg GetOrCreateAlbumByTitleParams) (GetOrCreateAlbumByTitleRow, error) {
	row := q.db.QueryRow(ctx, getOrCreateAlbumByTitle,
		arg.Title,
		arg.SpotifyID,
		arg.ReleaseDate,
		arg.SpotifyPopularity,
		arg.TotalTracks,
		arg.TotalAvailableTracks,
	)
	var i GetOrCreateAlbumByTitleRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
	)
	return i, err
}
