// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: albums.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkAlbumExistsBySpotifyID = `-- name: CheckAlbumExistsBySpotifyID :one
SELECT EXISTS(
    SELECT 1 FROM albums WHERE spotify_id = $1
) as exists
`

func (q *Queries) CheckAlbumExistsBySpotifyID(ctx context.Context, spotifyID string) (bool, error) {
	row := q.db.QueryRow(ctx, checkAlbumExistsBySpotifyID, spotifyID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (
    title,
    sort_title,
    release_date,
    spotify_id,
    spotify_popularity,
    total_tracks,
    musician_id,
    cover,
    disc_count
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, created_at, updated_at, title, sort_title, spotify_id, release_date, year, spotify_popularity, total_tracks, disc_count, cover, musician_id
`

type CreateAlbumParams struct {
	Title             string      `json:"title"`
	SortTitle         string      `json:"sort_title"`
	ReleaseDate       pgtype.Date `json:"release_date"`
	SpotifyID         string      `json:"spotify_id"`
	SpotifyPopularity int32       `json:"spotify_popularity"`
	TotalTracks       int32       `json:"total_tracks"`
	MusicianID        pgtype.Int4 `json:"musician_id"`
	Cover             string      `json:"cover"`
	DiscCount         int32       `json:"disc_count"`
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRow(ctx, createAlbum,
		arg.Title,
		arg.SortTitle,
		arg.ReleaseDate,
		arg.SpotifyID,
		arg.SpotifyPopularity,
		arg.TotalTracks,
		arg.MusicianID,
		arg.Cover,
		arg.DiscCount,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.DiscCount,
		&i.Cover,
		&i.MusicianID,
	)
	return i, err
}

const getAlbumBySpotifyID = `-- name: GetAlbumBySpotifyID :one
SELECT id, created_at, updated_at, title, sort_title, spotify_id, release_date, year, spotify_popularity, total_tracks, disc_count, cover, musician_id FROM albums WHERE spotify_id = $1 LIMIT 1
`

func (q *Queries) GetAlbumBySpotifyID(ctx context.Context, spotifyID string) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumBySpotifyID, spotifyID)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.DiscCount,
		&i.Cover,
		&i.MusicianID,
	)
	return i, err
}
