// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: albums.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (
    title,
    sort_title,
    spotify_id,
    release_date,
    year,
    spotify_popularity,
    total_tracks,
    musician,
    cover
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, created_at, updated_at, title, sort_title, spotify_id, release_date, year, spotify_popularity, total_tracks, musician, cover
`

type CreateAlbumParams struct {
	Title             string      `json:"title"`
	SortTitle         string      `json:"sort_title"`
	SpotifyID         pgtype.Text `json:"spotify_id"`
	ReleaseDate       pgtype.Date `json:"release_date"`
	Year              pgtype.Int4 `json:"year"`
	SpotifyPopularity pgtype.Int4 `json:"spotify_popularity"`
	TotalTracks       int32       `json:"total_tracks"`
	Musician          pgtype.Text `json:"musician"`
	Cover             pgtype.Text `json:"cover"`
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRow(ctx, createAlbum,
		arg.Title,
		arg.SortTitle,
		arg.SpotifyID,
		arg.ReleaseDate,
		arg.Year,
		arg.SpotifyPopularity,
		arg.TotalTracks,
		arg.Musician,
		arg.Cover,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.Musician,
		&i.Cover,
	)
	return i, err
}

const getAlbumBySpotifyID = `-- name: GetAlbumBySpotifyID :one
SELECT id, created_at, updated_at, title, sort_title, spotify_id, release_date, year, spotify_popularity, total_tracks, musician, cover FROM albums WHERE spotify_id = $1 LIMIT 1
`

func (q *Queries) GetAlbumBySpotifyID(ctx context.Context, spotifyID pgtype.Text) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumBySpotifyID, spotifyID)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.Musician,
		&i.Cover,
	)
	return i, err
}

const getAlbumByTitle = `-- name: GetAlbumByTitle :one
SELECT id, created_at, updated_at, title, sort_title, spotify_id, release_date, year, spotify_popularity, total_tracks, musician, cover FROM albums Where title = $1
`

func (q *Queries) GetAlbumByTitle(ctx context.Context, title string) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumByTitle, title)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.Musician,
		&i.Cover,
	)
	return i, err
}

const getAlbumCount = `-- name: GetAlbumCount :one
SELECT COUNT(*) FROM albums
`

func (q *Queries) GetAlbumCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAlbumCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAlbumDetails = `-- name: GetAlbumDetails :one
SELECT id, created_at, updated_at, title, sort_title, spotify_id, release_date, year, spotify_popularity, total_tracks, musician, cover FROM albums WHERE id = $1
`

func (q *Queries) GetAlbumDetails(ctx context.Context, id int32) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumDetails, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SortTitle,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.Year,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.Musician,
		&i.Cover,
	)
	return i, err
}

const getLatestAlbums = `-- name: GetLatestAlbums :many
SELECT 
    id,
    title,
    musician,
    cover
FROM albums
ORDER BY created_at DESC
LIMIT 12
`

type GetLatestAlbumsRow struct {
	ID       int32       `json:"id"`
	Title    string      `json:"title"`
	Musician pgtype.Text `json:"musician"`
	Cover    pgtype.Text `json:"cover"`
}

func (q *Queries) GetLatestAlbums(ctx context.Context) ([]GetLatestAlbumsRow, error) {
	rows, err := q.db.Query(ctx, getLatestAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLatestAlbumsRow{}
	for rows.Next() {
		var i GetLatestAlbumsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Musician,
			&i.Cover,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
