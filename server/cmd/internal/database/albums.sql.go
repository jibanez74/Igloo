// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: albums.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkAlbumExistsBySpotifyID = `-- name: CheckAlbumExistsBySpotifyID :one
SELECT EXISTS(
    SELECT 1 FROM albums WHERE spotify_id = $1
) as exists
`

func (q *Queries) CheckAlbumExistsBySpotifyID(ctx context.Context, spotifyID string) (bool, error) {
	row := q.db.QueryRow(ctx, checkAlbumExistsBySpotifyID, spotifyID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (
    title,
    release_date,
    spotify_id,
    spotify_popularity,
    total_tracks,
    total_available_tracks
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, created_at, updated_at, title, spotify_id, release_date, spotify_popularity, total_tracks, total_available_tracks
`

type CreateAlbumParams struct {
	Title                string `json:"title"`
	ReleaseDate          string `json:"release_date"`
	SpotifyID            string `json:"spotify_id"`
	SpotifyPopularity    int32  `json:"spotify_popularity"`
	TotalTracks          int32  `json:"total_tracks"`
	TotalAvailableTracks int32  `json:"total_available_tracks"`
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRow(ctx, createAlbum,
		arg.Title,
		arg.ReleaseDate,
		arg.SpotifyID,
		arg.SpotifyPopularity,
		arg.TotalTracks,
		arg.TotalAvailableTracks,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
	)
	return i, err
}

const getAlbumBySpotifyID = `-- name: GetAlbumBySpotifyID :one
SELECT id, created_at, updated_at, title, spotify_id, release_date, spotify_popularity, total_tracks, total_available_tracks FROM albums WHERE spotify_id = $1 LIMIT 1
`

func (q *Queries) GetAlbumBySpotifyID(ctx context.Context, spotifyID string) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbumBySpotifyID, spotifyID)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.SpotifyID,
		&i.ReleaseDate,
		&i.SpotifyPopularity,
		&i.TotalTracks,
		&i.TotalAvailableTracks,
	)
	return i, err
}

const getAlbumsCount = `-- name: GetAlbumsCount :one
SELECT COUNT(*) FROM albums
`

func (q *Queries) GetAlbumsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAlbumsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllAlbumsWithImages = `-- name: GetAllAlbumsWithImages :many
SELECT 
    a.id, 
    a.title, 
    a.release_date,
    si.id as image_id, 
    si.path as image_path, 
    si.width as image_width, 
    si.height as image_height
FROM albums a
LEFT JOIN spotify_images si ON a.id = si.album_id
ORDER BY a.title ASC
`

type GetAllAlbumsWithImagesRow struct {
	ID          int32       `json:"id"`
	Title       string      `json:"title"`
	ReleaseDate string      `json:"release_date"`
	ImageID     pgtype.Int4 `json:"image_id"`
	ImagePath   pgtype.Text `json:"image_path"`
	ImageWidth  pgtype.Int4 `json:"image_width"`
	ImageHeight pgtype.Int4 `json:"image_height"`
}

func (q *Queries) GetAllAlbumsWithImages(ctx context.Context) ([]GetAllAlbumsWithImagesRow, error) {
	rows, err := q.db.Query(ctx, getAllAlbumsWithImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAlbumsWithImagesRow{}
	for rows.Next() {
		var i GetAllAlbumsWithImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ReleaseDate,
			&i.ImageID,
			&i.ImagePath,
			&i.ImageWidth,
			&i.ImageHeight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
