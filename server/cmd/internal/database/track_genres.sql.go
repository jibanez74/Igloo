// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: track_genres.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkTrackGenreExists = `-- name: CheckTrackGenreExists :one
SELECT EXISTS(
    SELECT 1 FROM track_genres WHERE track_id = $1 AND genre_id = $2
) as exists
`

type CheckTrackGenreExistsParams struct {
	TrackID int32 `json:"track_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) CheckTrackGenreExists(ctx context.Context, arg CheckTrackGenreExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkTrackGenreExists, arg.TrackID, arg.GenreID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createTrackGenre = `-- name: CreateTrackGenre :exec
INSERT INTO track_genres (
    track_id, genre_id
) VALUES (
    $1, $2
)
`

type CreateTrackGenreParams struct {
	TrackID int32 `json:"track_id"`
	GenreID int32 `json:"genre_id"`
}

func (q *Queries) CreateTrackGenre(ctx context.Context, arg CreateTrackGenreParams) error {
	_, err := q.db.Exec(ctx, createTrackGenre, arg.TrackID, arg.GenreID)
	return err
}

const getTrackGenresByAlbumID = `-- name: GetTrackGenresByAlbumID :many
SELECT tg.track_id, tg.genre_id
FROM track_genres tg
JOIN tracks t ON t.id = tg.track_id
WHERE t.album_id = $1
`

func (q *Queries) GetTrackGenresByAlbumID(ctx context.Context, albumID pgtype.Int4) ([]TrackGenre, error) {
	rows, err := q.db.Query(ctx, getTrackGenresByAlbumID, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrackGenre{}
	for rows.Next() {
		var i TrackGenre
		if err := rows.Scan(&i.TrackID, &i.GenreID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
