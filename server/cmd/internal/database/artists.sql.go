// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: artists.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOrCreateArtist = `-- name: GetOrCreateArtist :one
WITH existing_artist AS (
    SELECT a.id, a.created_at, a.updated_at, a.name, a.original_name, a.thumb, a.tmdb_id 
    FROM artists a
    WHERE a.tmdb_id = $1
    LIMIT 1
), new_artist AS (
    INSERT INTO artists (
        name,
        original_name,
        thumb,
        tmdb_id
    )
    SELECT $2, $3, $4, $1
    WHERE NOT EXISTS (SELECT 1 FROM existing_artist)
    RETURNING id, created_at, updated_at, name, original_name, thumb, tmdb_id
)
SELECT e.id, e.created_at, e.updated_at, e.name, e.original_name, e.thumb, e.tmdb_id 
FROM existing_artist e
UNION ALL
SELECT n.id, n.created_at, n.updated_at, n.name, n.original_name, n.thumb, n.tmdb_id 
FROM new_artist n
`

type GetOrCreateArtistParams struct {
	TmdbID       int32       `json:"tmdb_id"`
	Name         string      `json:"name"`
	OriginalName pgtype.Text `json:"original_name"`
	Thumb        pgtype.Text `json:"thumb"`
}

type GetOrCreateArtistRow struct {
	ID           int32              `json:"id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	Name         string             `json:"name"`
	OriginalName pgtype.Text        `json:"original_name"`
	Thumb        pgtype.Text        `json:"thumb"`
	TmdbID       int32              `json:"tmdb_id"`
}

func (q *Queries) GetOrCreateArtist(ctx context.Context, arg GetOrCreateArtistParams) (GetOrCreateArtistRow, error) {
	row := q.db.QueryRow(ctx, getOrCreateArtist,
		arg.TmdbID,
		arg.Name,
		arg.OriginalName,
		arg.Thumb,
	)
	var i GetOrCreateArtistRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.OriginalName,
		&i.Thumb,
		&i.TmdbID,
	)
	return i, err
}
