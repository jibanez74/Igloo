// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: video_streams.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVideoStream = `-- name: CreateVideoStream :one
INSERT INTO video_streams (
    title,
    index,
    duration,
    profile,
    aspect_ratio,
    bit_rate,
    bit_depth,
    codec,
    width,
    height,
    coded_width,
    coded_height,
    color_transfer,
    color_primaries,
    color_space,
    color_range,
    frame_rate,
    avg_frame_rate,
    level,
    movie_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17, $18, $19, $20
)
RETURNING id, created_at, updated_at, title, index, duration, profile, aspect_ratio, bit_rate, bit_depth, codec, width, height, coded_width, coded_height, color_transfer, color_primaries, color_space, color_range, frame_rate, avg_frame_rate, level, movie_id
`

type CreateVideoStreamParams struct {
	Title          string      `json:"title"`
	Index          int32       `json:"index"`
	Duration       int32       `json:"duration"`
	Profile        string      `json:"profile"`
	AspectRatio    string      `json:"aspect_ratio"`
	BitRate        string      `json:"bit_rate"`
	BitDepth       string      `json:"bit_depth"`
	Codec          string      `json:"codec"`
	Width          int32       `json:"width"`
	Height         int32       `json:"height"`
	CodedWidth     int32       `json:"coded_width"`
	CodedHeight    int32       `json:"coded_height"`
	ColorTransfer  string      `json:"color_transfer"`
	ColorPrimaries string      `json:"color_primaries"`
	ColorSpace     string      `json:"color_space"`
	ColorRange     string      `json:"color_range"`
	FrameRate      string      `json:"frame_rate"`
	AvgFrameRate   string      `json:"avg_frame_rate"`
	Level          int32       `json:"level"`
	MovieID        pgtype.Int4 `json:"movie_id"`
}

func (q *Queries) CreateVideoStream(ctx context.Context, arg CreateVideoStreamParams) (VideoStream, error) {
	row := q.db.QueryRow(ctx, createVideoStream,
		arg.Title,
		arg.Index,
		arg.Duration,
		arg.Profile,
		arg.AspectRatio,
		arg.BitRate,
		arg.BitDepth,
		arg.Codec,
		arg.Width,
		arg.Height,
		arg.CodedWidth,
		arg.CodedHeight,
		arg.ColorTransfer,
		arg.ColorPrimaries,
		arg.ColorSpace,
		arg.ColorRange,
		arg.FrameRate,
		arg.AvgFrameRate,
		arg.Level,
		arg.MovieID,
	)
	var i VideoStream
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Index,
		&i.Duration,
		&i.Profile,
		&i.AspectRatio,
		&i.BitRate,
		&i.BitDepth,
		&i.Codec,
		&i.Width,
		&i.Height,
		&i.CodedWidth,
		&i.CodedHeight,
		&i.ColorTransfer,
		&i.ColorPrimaries,
		&i.ColorSpace,
		&i.ColorRange,
		&i.FrameRate,
		&i.AvgFrameRate,
		&i.Level,
		&i.MovieID,
	)
	return i, err
}

const getMovieVideoStreams = `-- name: GetMovieVideoStreams :many
SELECT id, created_at, updated_at, title, index, duration, profile, aspect_ratio, bit_rate, bit_depth, codec, width, height, coded_width, coded_height, color_transfer, color_primaries, color_space, color_range, frame_rate, avg_frame_rate, level, movie_id FROM video_streams
WHERE movie_id = $1
ORDER BY index
`

func (q *Queries) GetMovieVideoStreams(ctx context.Context, movieID pgtype.Int4) ([]VideoStream, error) {
	rows, err := q.db.Query(ctx, getMovieVideoStreams, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VideoStream{}
	for rows.Next() {
		var i VideoStream
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Index,
			&i.Duration,
			&i.Profile,
			&i.AspectRatio,
			&i.BitRate,
			&i.BitDepth,
			&i.Codec,
			&i.Width,
			&i.Height,
			&i.CodedWidth,
			&i.CodedHeight,
			&i.ColorTransfer,
			&i.ColorPrimaries,
			&i.ColorSpace,
			&i.ColorRange,
			&i.FrameRate,
			&i.AvgFrameRate,
			&i.Level,
			&i.MovieID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
