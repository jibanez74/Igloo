// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: album_musicians.sql

package database

import (
	"context"
)

const createAlbumMusician = `-- name: CreateAlbumMusician :exec
INSERT INTO album_musicians (
    album_id, musician_id
) VALUES (
    $1, $2
)
`

type CreateAlbumMusicianParams struct {
	AlbumID    int32 `json:"album_id"`
	MusicianID int32 `json:"musician_id"`
}

func (q *Queries) CreateAlbumMusician(ctx context.Context, arg CreateAlbumMusicianParams) error {
	_, err := q.db.Exec(ctx, createAlbumMusician, arg.AlbumID, arg.MusicianID)
	return err
}

const deleteAlbumMusician = `-- name: DeleteAlbumMusician :exec
DELETE FROM album_musicians
WHERE album_id = $1 AND musician_id = $2
`

type DeleteAlbumMusicianParams struct {
	AlbumID    int32 `json:"album_id"`
	MusicianID int32 `json:"musician_id"`
}

func (q *Queries) DeleteAlbumMusician(ctx context.Context, arg DeleteAlbumMusicianParams) error {
	_, err := q.db.Exec(ctx, deleteAlbumMusician, arg.AlbumID, arg.MusicianID)
	return err
}

const getAlbumMusicians = `-- name: GetAlbumMusicians :many
SELECT album_id, musician_id FROM album_musicians
WHERE album_id = $1
`

func (q *Queries) GetAlbumMusicians(ctx context.Context, albumID int32) ([]AlbumMusician, error) {
	rows, err := q.db.Query(ctx, getAlbumMusicians, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AlbumMusician{}
	for rows.Next() {
		var i AlbumMusician
		if err := rows.Scan(&i.AlbumID, &i.MusicianID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMusicianAlbums = `-- name: GetMusicianAlbums :many
SELECT album_id, musician_id FROM album_musicians
WHERE musician_id = $1
`

func (q *Queries) GetMusicianAlbums(ctx context.Context, musicianID int32) ([]AlbumMusician, error) {
	rows, err := q.db.Query(ctx, getMusicianAlbums, musicianID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AlbumMusician{}
	for rows.Next() {
		var i AlbumMusician
		if err := rows.Scan(&i.AlbumID, &i.MusicianID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
