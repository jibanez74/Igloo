// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: album_musicians.sql

package database

import (
	"context"
)

const checkAlbumMusicianExists = `-- name: CheckAlbumMusicianExists :one
SELECT EXISTS(
    SELECT 1 FROM album_musicians 
    WHERE album_id = $1 AND musician_id = $2
)
`

type CheckAlbumMusicianExistsParams struct {
	AlbumID    int32 `json:"album_id"`
	MusicianID int32 `json:"musician_id"`
}

func (q *Queries) CheckAlbumMusicianExists(ctx context.Context, arg CheckAlbumMusicianExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkAlbumMusicianExists, arg.AlbumID, arg.MusicianID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAlbumMusician = `-- name: CreateAlbumMusician :one
INSERT INTO album_musicians (
    album_id,
    musician_id
) VALUES (
    $1, $2
)
RETURNING album_id, musician_id
`

type CreateAlbumMusicianParams struct {
	AlbumID    int32 `json:"album_id"`
	MusicianID int32 `json:"musician_id"`
}

func (q *Queries) CreateAlbumMusician(ctx context.Context, arg CreateAlbumMusicianParams) (AlbumMusician, error) {
	row := q.db.QueryRow(ctx, createAlbumMusician, arg.AlbumID, arg.MusicianID)
	var i AlbumMusician
	err := row.Scan(&i.AlbumID, &i.MusicianID)
	return i, err
}
