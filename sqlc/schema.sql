-- Extensions (enable before creating objects that use them)
CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pg_trgm;

CREATE TABLE users (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(60) NOT NULL,
  email CITEXT NOT NULL UNIQUE CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
  username CITEXT NOT NULL UNIQUE,
  password VARCHAR(128) NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT false,
  is_admin  BOOLEAN NOT NULL DEFAULT false,
  avatar TEXT
);

CREATE TABLE global_settings (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  port INTEGER NOT NULL DEFAULT 8080,
  debug BOOLEAN NOT NULL DEFAULT false,
  enable_logger BOOLEAN NOT NULL DEFAULT false,
  base_url VARCHAR(255) NOT NULL,
  logs_dir TEXT NOT NULL,
  enable_watcher BOOLEAN NOT NULL DEFAULT false,
  movies_dir TEXT,
  music_dir TEXT,
  tvshows_dir TEXT,
  transcode_dir TEXT,
  movies_img_dir TEXT NOT NULL,
  studios_img_dir TEXT NOT NULL,
  artists_img_dir TEXT NOT NULL,
  avatar_img_dir TEXT NOT NULL,
  static_dir TEXT NOT NULL,
  download_images BOOLEAN NOT NULL DEFAULT false,
  tmdb_api_key VARCHAR(255),
  ffmpeg_path TEXT,
  ffprobe_path TEXT,
  enable_hardware_acceleration BOOLEAN NOT NULL DEFAULT false,
  hardware_acceleration_method VARCHAR(10) NOT NULL DEFAULT 'cpu' CHECK (hardware_acceleration_method IN ('cpu','nvidia','intel','apple')),
  jellyfin_token VARCHAR(255),
  plex_token VARCHAR(255),
  spotify_client_id VARCHAR(255),
  spotify_client_secret VARCHAR(255)
);

CREATE TABLE movies (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(100) NOT NULL,
  file_path TEXT NOT NULL UNIQUE CHECK (file_path ~ '^/[^/].*' OR file_path ~ '^[A-Za-z]:\\'),
  file_name VARCHAR(255) NOT NULL,
  container VARCHAR(10) NOT NULL CHECK (container IN ('mp4', 'mkv', 'avi')),
  size BIGINT NOT NULL,
  content_type VARCHAR(50),
  run_time INTEGER CHECK (run_time > 0),
  adult BOOLEAN NOT NULL DEFAULT false,
  tag_line VARCHAR(255),
  summary TEXT,
  art TEXT,
  thumb TEXT,
  tmdb_id VARCHAR(255) UNIQUE,
  imdb_id VARCHAR(255) UNIQUE,
  release_date DATE,
  year INTEGER,
  budget BIGINT,
  revenue BIGINT,
  content_rating VARCHAR(20),
  audience_rating DECIMAL(2,1) NOT NULL DEFAULT 0.0 CHECK (audience_rating BETWEEN 0.0 AND 10.0),
  critic_rating   DECIMAL(2,1) NOT NULL DEFAULT 0.0 CHECK (critic_rating   BETWEEN 0.0 AND 10.0),
  spoken_languages VARCHAR(60)
);

CREATE TABLE artists (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(255) NOT NULL,
  original_name VARCHAR(255),
  thumb TEXT,
  tmdb_id INTEGER UNIQUE NOT NULL
);

CREATE TABLE musicians (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(255) NOT NULL,
  sort_name VARCHAR(255) NOT NULL,
  summary TEXT,
  spotify_id VARCHAR(255) UNIQUE,
  spotify_popularity INTEGER NOT NULL DEFAULT 0 CHECK (spotify_popularity >= 0),
  spotify_followers INTEGER NOT NULL DEFAULT 0 CHECK (spotify_followers >= 0),
  thumb TEXT UNIQUE
);

CREATE TABLE albums (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(100) NOT NULL,
  sort_title VARCHAR(100) NOT NULL,
  spotify_id VARCHAR(255) UNIQUE,
  release_date DATE,
  year INTEGER,
  spotify_popularity INTEGER CHECK (spotify_popularity >= 0),
  total_tracks INTEGER NOT NULL DEFAULT 0 CHECK (total_tracks >= 0),
  cover TEXT UNIQUE
);

CREATE TABLE tracks (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(100) NOT NULL,
  sort_title VARCHAR(100) NOT NULL,
  disc INTEGER NOT NULL DEFAULT 0 CHECK (disc >= 0),
  track_index INTEGER NOT NULL CHECK(track_index >= 0),
  duration NUMERIC(10,3) NOT NULL CHECK (duration > 0),
  file_path TEXT NOT NULL UNIQUE CHECK (file_path ~ '^/[^/].*' OR file_path ~ '^[A-Za-z]:\\\\'),
  file_name VARCHAR(255) NOT NULL,
  container VARCHAR(10) NOT NULL CHECK (container IN ('mp3', 'flac', 'm4a')),
  codec VARCHAR(20) NOT NULL,
  channels INTEGER NOT NULL,
  channel_layout VARCHAR(20) NOT NULL,
  size BIGINT NOT NULL CHECK (size >= 0),
  composer VARCHAR(255),
  release_date DATE,
  year INTEGER,
  bit_rate INTEGER CHECK (bit_rate >= 0) NOT NULL,
  copyright VARCHAR(255),
  language VARCHAR(10),
  profile VARCHAR(20),
  album_id INTEGER REFERENCES albums(id) ON DELETE SET NULL,
  musician_id INTEGER REFERENCES musicians(id) ON DELETE SET NULL
);

CREATE TABLE genres (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  tag VARCHAR(50) NOT NULL UNIQUE,
  genre_type VARCHAR(10) NOT NULL CHECK (genre_type IN ('movie','music'))
);

CREATE TABLE studios (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(255) NOT NULL,
  country VARCHAR(2),
  logo TEXT UNIQUE,
  tmdb_id INTEGER UNIQUE NOT NULL
);

-- Movie-related tables

CREATE TABLE cast_list (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  artist_id INTEGER REFERENCES artists(id) ON DELETE CASCADE,
  movie_id  INTEGER REFERENCES movies(id)  ON DELETE CASCADE,
  character TEXT NOT NULL,
  sort_order INTEGER NOT NULL CHECK (sort_order >= 0)
);

CREATE TABLE crew_list (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  artist_id INTEGER REFERENCES artists(id) ON DELETE CASCADE,
  movie_id  INTEGER REFERENCES movies(id)  ON DELETE CASCADE,
  job VARCHAR(255) NOT NULL,
  department VARCHAR(255) NOT NULL
);

CREATE TABLE video_streams (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  video_index INTEGER NOT NULL CHECK (video_index >= 0),
  duration INTEGER NOT NULL CHECK (duration > 0),
  profile VARCHAR(20) NOT NULL,
  aspect_ratio VARCHAR(50) NOT NULL,
  bit_rate VARCHAR(60) NOT NULL,
  bit_depth VARCHAR(60) NOT NULL,
  codec VARCHAR(30) NOT NULL,
  width INTEGER NOT NULL,
  height INTEGER NOT NULL,
  coded_width INTEGER NOT NULL,
  coded_height INTEGER NOT NULL,
  color_transfer VARCHAR(100) NOT NULL,
  color_primaries VARCHAR(100) NOT NULL,
  color_space VARCHAR(100) NOT NULL,
  color_range VARCHAR(100) NOT NULL,
  frame_rate VARCHAR(100) NOT NULL,
  avg_frame_rate VARCHAR(100) NOT NULL,
  level INTEGER NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

CREATE TABLE audio_streams (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  audio_index INTEGER NOT NULL CHECK (audio_index >= 0),
  codec VARCHAR(30) NOT NULL,
  channels INTEGER NOT NULL CHECK (channels >= 1),
  channel_layout VARCHAR(50) NOT NULL,
  language VARCHAR(60) NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

CREATE TABLE subtitles (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  subtitle_index INTEGER NOT NULL CHECK (subtitle_index >= 0),
  codec VARCHAR(30) NOT NULL,
  language VARCHAR(100) NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

CREATE TABLE chapters (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  start_time_ms INTEGER NOT NULL,
  thumb TEXT NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

CREATE TABLE movie_extras (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  url TEXT NOT NULL,
  kind VARCHAR(100) NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

-- Junction tables for many-to-many rels

CREATE TABLE movie_genres (
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (movie_id, genre_id)
);

CREATE TABLE movie_studios (
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE,
  studio_id INTEGER REFERENCES studios(id) ON DELETE CASCADE,
  PRIMARY KEY (movie_id, studio_id)
);

CREATE TABLE album_genres (
  album_id INTEGER REFERENCES albums(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (album_id, genre_id)
);

CREATE TABLE musician_genres (
  musician_id INTEGER REFERENCES musicians(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (musician_id, genre_id)
);

CREATE TABLE track_genres (
  track_id INTEGER REFERENCES tracks(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (track_id, genre_id)
);

CREATE TABLE album_musicians (
  album_id INTEGER REFERENCES albums(id) ON DELETE CASCADE,
  musician_id INTEGER REFERENCES musicians(id) ON DELETE CASCADE,
  PRIMARY KEY (album_id, musician_id)
);

-- Indexes

-- Core lookups
CREATE INDEX idx_movies_title ON movies (title);
CREATE INDEX idx_movies_year ON movies (year);
CREATE INDEX idx_movies_release_date ON movies (release_date);

CREATE INDEX idx_artists_name ON artists (name);
CREATE INDEX idx_musicians_name ON musicians (name);
CREATE INDEX idx_albums_title ON albums (title);

CREATE INDEX idx_tracks_title ON tracks (title);
CREATE INDEX idx_tracks_release_date ON tracks (release_date);
CREATE INDEX idx_tracks_year ON tracks (year);

CREATE INDEX idx_genres_tag ON genres (tag);
CREATE INDEX idx_studios_name ON studios (name);

-- Foreign key helper indexes
CREATE INDEX idx_cast_list_movie_id ON cast_list (movie_id);
CREATE INDEX idx_cast_list_artist_id ON cast_list (artist_id);
CREATE INDEX idx_crew_list_movie_id ON crew_list (movie_id);
CREATE INDEX idx_crew_list_artist_id ON crew_list (artist_id);
CREATE INDEX idx_movie_extras_movie_id ON movie_extras (movie_id);
CREATE INDEX idx_chapters_movie_id ON chapters (movie_id);
CREATE INDEX idx_video_streams_movie_id ON video_streams (movie_id);
CREATE INDEX idx_audio_streams_movie_id ON audio_streams (movie_id);
CREATE INDEX idx_subtitles_movie_id ON subtitles (movie_id);

-- Many-to-many helper indexes
CREATE INDEX idx_movie_genres_movie_id ON movie_genres (movie_id);
CREATE INDEX idx_movie_genres_genre_id ON movie_genres (genre_id);
CREATE INDEX idx_movie_studios_movie_id ON movie_studios (movie_id);
CREATE INDEX idx_movie_studios_studio_id ON movie_studios (studio_id);
CREATE INDEX idx_tracks_album_id ON tracks (album_id);
CREATE INDEX idx_album_genres_album_id ON album_genres (album_id);
CREATE INDEX idx_album_genres_genre_id ON album_genres (genre_id);
CREATE INDEX idx_musician_genres_musician_id ON musician_genres (musician_id);
CREATE INDEX idx_musician_genres_genre_id ON musician_genres (genre_id);
CREATE INDEX idx_track_genres_track_id ON track_genres (track_id);
CREATE INDEX idx_track_genres_genre_id ON track_genres (genre_id);
CREATE INDEX idx_album_musicians_album_id ON album_musicians (album_id);
CREATE INDEX idx_album_musicians_musician_id ON album_musicians (musician_id);

-- Additional performance indexes

-- Full-text search indexes
CREATE INDEX idx_movies_summary_fts ON movies USING gin(to_tsvector('english', summary));
CREATE INDEX idx_movies_tag_line_fts ON movies USING gin(to_tsvector('english', tag_line));
CREATE INDEX idx_musicians_summary_fts ON musicians USING gin(to_tsvector('english', summary));

-- Trigram indexes for fuzzy matching
CREATE INDEX idx_movies_title_trgm ON movies USING gin(title gin_trgm_ops);
CREATE INDEX idx_artists_name_trgm ON artists USING gin(name gin_trgm_ops);
CREATE INDEX idx_musicians_name_trgm ON musicians USING gin(name gin_trgm_ops);
CREATE INDEX idx_albums_title_trgm ON albums USING gin(title gin_trgm_ops);
CREATE INDEX idx_tracks_title_trgm ON tracks USING gin(title gin_trgm_ops);

-- Boolean field indexes
CREATE INDEX idx_movies_adult ON movies (adult);
CREATE INDEX idx_users_is_active ON users (is_active);
CREATE INDEX idx_users_is_admin ON users (is_admin);
CREATE INDEX idx_global_settings_debug ON global_settings (debug);
CREATE INDEX idx_global_settings_enable_logger ON global_settings (enable_logger);
CREATE INDEX idx_global_settings_enable_watcher ON global_settings (enable_watcher);
CREATE INDEX idx_global_settings_download_images ON global_settings (download_images);
CREATE INDEX idx_global_settings_enable_hardware_acceleration ON global_settings (enable_hardware_acceleration);

-- Composite indexes for common query patterns
CREATE INDEX idx_movies_year_rating ON movies (year, audience_rating);
CREATE INDEX idx_movies_genre_type ON movies (content_rating, adult);
CREATE INDEX idx_tracks_album_year ON tracks (album_id, year);
CREATE INDEX idx_tracks_musician_year ON tracks (musician_id, year);
CREATE INDEX idx_cast_list_movie_character ON cast_list (movie_id, character);
CREATE INDEX idx_crew_list_movie_job ON crew_list (movie_id, job);

-- Constraints to prevent duplicates & ensure consistency

-- Cast/Crew duplicates
ALTER TABLE cast_list ADD CONSTRAINT uq_cast UNIQUE (movie_id, artist_id, character);
ALTER TABLE crew_list ADD CONSTRAINT uq_crew UNIQUE (movie_id, artist_id, job);

-- Singleton for global_settings
CREATE UNIQUE INDEX only_one_global_settings ON global_settings ((true));

-- Triggers for automatic updated_at timestamp updates

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for all tables with updated_at columns
CREATE TRIGGER update_users_updated_at           BEFORE UPDATE ON users           FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_global_settings_updated_at BEFORE UPDATE ON global_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_movies_updated_at          BEFORE UPDATE ON movies          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_artists_updated_at         BEFORE UPDATE ON artists         FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_musicians_updated_at       BEFORE UPDATE ON musicians       FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_albums_updated_at          BEFORE UPDATE ON albums          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tracks_updated_at          BEFORE UPDATE ON tracks          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_genres_updated_at          BEFORE UPDATE ON genres          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_studios_updated_at         BEFORE UPDATE ON studios         FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_cast_list_updated_at       BEFORE UPDATE ON cast_list       FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_crew_list_updated_at       BEFORE UPDATE ON crew_list       FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_video_streams_updated_at   BEFORE UPDATE ON video_streams   FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_audio_streams_updated_at   BEFORE UPDATE ON audio_streams   FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_subtitles_updated_at       BEFORE UPDATE ON subtitles       FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_chapters_updated_at        BEFORE UPDATE ON chapters        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_movie_extras_updated_at    BEFORE UPDATE ON movie_extras    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
