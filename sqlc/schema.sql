-- schema.sql

-- =========================================================
-- Extensions (enable before creating objects that use them)
-- =========================================================
CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- =========================================================
-- Drop existing tables (in correct order for FK constraints)
-- =========================================================

-- Music-related junction tables (child tables first)
DROP TABLE IF EXISTS track_genres CASCADE;
DROP TABLE IF EXISTS musician_genres CASCADE;
DROP TABLE IF EXISTS album_genres CASCADE;

-- Movie-related junction tables
DROP TABLE IF EXISTS movie_genres CASCADE;
DROP TABLE IF EXISTS movie_studios CASCADE;

-- Movie-related child tables
DROP TABLE IF EXISTS video_streams CASCADE;
DROP TABLE IF EXISTS audio_streams CASCADE;
DROP TABLE IF EXISTS subtitles CASCADE;
DROP TABLE IF EXISTS chapters CASCADE;
DROP TABLE IF EXISTS movie_extras CASCADE;
DROP TABLE IF EXISTS crew_list CASCADE;
DROP TABLE IF EXISTS cast_list CASCADE;

-- Core tables (parents last)
DROP TABLE IF EXISTS tracks CASCADE;
DROP TABLE IF EXISTS albums CASCADE;
DROP TABLE IF EXISTS musicians CASCADE;
DROP TABLE IF EXISTS movies CASCADE;
DROP TABLE IF EXISTS artists CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS studios CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS global_settings CASCADE;

-- =================================
-- Core tables
-- =================================

CREATE TABLE users (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(60) NOT NULL,
  email CITEXT NOT NULL UNIQUE,
  username CITEXT NOT NULL UNIQUE,
  password VARCHAR(128) NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT false,
  is_admin  BOOLEAN NOT NULL DEFAULT false,
  avatar TEXT NOT NULL DEFAULT '/static/images/users/no_avatar.png'
);

CREATE TABLE global_settings (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  port INTEGER NOT NULL DEFAULT 8080,
  debug BOOLEAN NOT NULL DEFAULT false,
  enable_logger BOOLEAN NOT NULL DEFAULT false,
  base_url VARCHAR(255) NOT NULL DEFAULT 'unknown',
  logs_dir VARCHAR(255) NOT NULL DEFAULT 'logs',
  enable_watcher BOOLEAN NOT NULL DEFAULT false,
  movies_dir VARCHAR(255) NOT NULL,
  music_dir VARCHAR(255) NOT NULL,
  tvshows_dir VARCHAR(255) NOT NULL,
  transcode_dir VARCHAR(255) NOT NULL DEFAULT 'transcode',
  movies_img_dir VARCHAR(255) NOT NULL DEFAULT '/static/images/movies',
  studios_img_dir VARCHAR(255) NOT NULL DEFAULT '/static/images/studios',
  artists_img_dir VARCHAR(255) NOT NULL DEFAULT '/static/images/artists',
  avatar_img_dir VARCHAR(255) NOT NULL DEFAULT '/static/images/avatars',
  static_dir VARCHAR(255) NOT NULL DEFAULT '/static',
  download_images BOOLEAN NOT NULL DEFAULT false,
  tmdb_api_key VARCHAR(255) NOT NULL DEFAULT 'unknown',
  ffmpeg_path VARCHAR(255) NOT NULL,
  ffprobe_path VARCHAR(255) NOT NULL,
  enable_hardware_acceleration BOOLEAN NOT NULL DEFAULT false,
  hardware_acceleration_method VARCHAR(10) NOT NULL DEFAULT 'cpu'
    CHECK (hardware_acceleration_method IN ('cpu','nvidia','intel','apple')),
  jellyfin_token VARCHAR(255) NOT NULL,
  plex_token VARCHAR(255) NOT NULL,
  spotify_client_id VARCHAR(255) NOT NULL,
  spotify_client_secret VARCHAR(255) NOT NULL
);

CREATE TABLE movies (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(100) NOT NULL DEFAULT 'unknown',
  file_path TEXT NOT NULL UNIQUE,
  file_name VARCHAR(255) NOT NULL,
  container VARCHAR(10) NOT NULL,
  size BIGINT NOT NULL,
  content_type VARCHAR(50) NOT NULL DEFAULT 'unknown',
  run_time INTEGER NOT NULL,
  adult BOOLEAN NOT NULL DEFAULT false,
  tag_line VARCHAR(255) NOT NULL DEFAULT 'unknown',
  summary TEXT NOT NULL DEFAULT 'unknown',
  art TEXT NOT NULL DEFAULT '/static/images/movies/no_art.png',
  thumb TEXT NOT NULL DEFAULT '/static/images/movies/no_thumb.png',
  tmdb_id VARCHAR(255) NOT NULL DEFAULT 'unknown',
  imdb_id VARCHAR(255) NOT NULL DEFAULT 'unknown',
  release_date DATE NOT NULL,
  year INTEGER NOT NULL GENERATED ALWAYS AS (EXTRACT(YEAR FROM release_date)) STORED,
  budget BIGINT NOT NULL,
  revenue BIGINT NOT NULL,
  content_rating VARCHAR(20) NOT NULL DEFAULT 'inknown',
  audience_rating DECIMAL(3,1) NOT NULL DEFAULT 0.0 CHECK (audience_rating BETWEEN 0.0 AND 10.0),
  critic_rating   DECIMAL(3,1) NOT NULL DEFAULT 0.0 CHECK (critic_rating   BETWEEN 0.0 AND 10.0),
  spoken_languages VARCHAR(255) NOT NULL DEFAULT 'unknown',
  CONSTRAINT chk_movies_nonneg CHECK (size >= 0 AND run_time > 0 AND budget >= 0 AND revenue >= 0)
);

CREATE TABLE artists (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(255) NOT NULL DEFAULT 'unknown',
  original_name VARCHAR(255) NOT NULL DEFAULT 'unknown',
  thumb TEXT NOT NULL DEFAULT '/static/images/artists/no_thumb.png',
  tmdb_id INTEGER UNIQUE NOT NULL
);

CREATE TABLE musicians (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(255) NOT NULL DEFAULT 'unknown',
  sort_name VARCHAR(255) NOT NULL DEFAULT 'unknown',
  summary TEXT NOT NULL DEFAULT 'unknown',
  spotify_id VARCHAR(255) NOT NULL DEFAULT 'unknown',
  spotify_popularity INTEGER NOT NULL CHECK (spotify_popularity >= 0),
  spotify_followers INTEGER NOT NULL DEFAULT 0,
  thumb TEXT NOT NULL DEFAULT '/static/images/musicians/no_thumb.png'
);

CREATE TABLE albums (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL DEFAULT 'unknown',
  sort_title VARCHAR(255) NOT NULL DEFAULT 'unknown',
  spotify_id VARCHAR(255) NOT NULL DEFAULT 'unknown',
  release_date DATE NOT NULL,
  year INTEGER NOT NULL GENERATED ALWAYS AS (EXTRACT(YEAR FROM release_date)) STORED,
  spotify_popularity INTEGER NOT NULL CHECK (spotify_popularity >= 0),
  total_tracks INTEGER NOT NULL DEFAULT 0,
  disc_count INTEGER NOT NULL DEFAULT 0,
  cover TEXT NOT NULL DEFAULT '/static/images/albums/no_cover.png',
  musician_id INTEGER REFERENCES musicians(id) ON DELETE SET NULL
);

CREATE TABLE tracks (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  sort_title VARCHAR(255) NOT NULL,
  disc INTEGER NOT NULL DEFAULT 0,
  index INTEGER NOT NULL,
  duration NUMERIC(10,3) NOT NULL,
  composer VARCHAR(255) NOT NULL DEFAULT 'unknown',
  release_date DATE NOT NULL,  
  year INTEGER NOT NULL GENERATED ALWAYS AS (EXTRACT(YEAR FROM release_date)) STORED,
  file_path TEXT NOT NULL UNIQUE,
  file_name VARCHAR(255) NOT NULL,
  container VARCHAR(50) NOT NULL,
  codec VARCHAR(20) NOT NULL,
  bit_rate INTEGER NOT NULL,
  channel_layout VARCHAR(20) NOT NULL,
  copyright VARCHAR(255) NOT NULL DEFAULT 'unknown',
  language VARCHAR(4) NOT NULL DEFAULT 'unknown',
  size BIGINT NOT NULL,
  profile VARCHAR(20) NOT NULL,
  sample_rate INTEGER NOT NULL,
  album_id INTEGER REFERENCES albums(id) ON DELETE SET NULL,
  musician_id INTEGER REFERENCES musicians(id) ON DELETE SET NULL
);

CREATE TABLE genres (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  tag VARCHAR(50) NOT NULL,
  genre_type VARCHAR(10) NOT NULL CHECK (genre_type IN ('movie','tvshow','music'))
);

CREATE TABLE studios (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  name VARCHAR(255) NOT NULL,
  country VARCHAR(2) NOT NULL,
  logo TEXT NOT NULL UNIQUE,
  tmdb_id INTEGER UNIQUE NOT NULL
);

-- =========================
-- Movie-related tables
-- =========================

CREATE TABLE cast_list (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  artist_id INTEGER REFERENCES artists(id) ON DELETE CASCADE,
  movie_id  INTEGER REFERENCES movies(id)  ON DELETE CASCADE,
  character TEXT NOT NULL,
  sort_order INTEGER NOT NULL
);

CREATE TABLE crew_list (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  artist_id INTEGER REFERENCES artists(id) ON DELETE CASCADE,
  movie_id  INTEGER REFERENCES movies(id)  ON DELETE CASCADE,
  job VARCHAR(255) NOT NULL,
  department VARCHAR(255) NOT NULL
);

CREATE TABLE video_streams (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  index INTEGER NOT NULL,
  duration INTEGER NOT NULL,
  profile VARCHAR(20) NOT NULL,
  aspect_ratio VARCHAR(50) NOT NULL,
  bit_rate VARCHAR(60) NOT NULL,
  bit_depth VARCHAR(60) NOT NULL,
  codec VARCHAR(30) NOT NULL,
  width INTEGER NOT NULL,
  height INTEGER NOT NULL,
  coded_width INTEGER NOT NULL,
  coded_height INTEGER NOT NULL,
  color_transfer VARCHAR(100) NOT NULL,
  color_primaries VARCHAR(100) NOT NULL,
  color_space VARCHAR(100) NOT NULL,
  color_range VARCHAR(100) NOT NULL,
  frame_rate VARCHAR(100) NOT NULL,
  avg_frame_rate VARCHAR(100) NOT NULL,
  level INTEGER NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

CREATE TABLE audio_streams (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  index INTEGER NOT NULL,
  codec VARCHAR(30) NOT NULL,
  channels INTEGER NOT NULL,
  channel_layout VARCHAR(50) NOT NULL,
  language VARCHAR(60) NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

CREATE TABLE subtitles (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  index INTEGER NOT NULL,
  codec VARCHAR(30) NOT NULL,
  language VARCHAR(100) NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

CREATE TABLE chapters (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  start_time_ms INTEGER NOT NULL,
  thumb TEXT NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

CREATE TABLE movie_extras (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(255) NOT NULL,
  url TEXT NOT NULL,
  kind VARCHAR(100) NOT NULL,
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE
);

-- ========================================
-- Junction tables for many-to-many rels
-- ========================================

CREATE TABLE movie_genres (
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (movie_id, genre_id)
);

CREATE TABLE movie_studios (
  movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE,
  studio_id INTEGER REFERENCES studios(id) ON DELETE CASCADE,
  PRIMARY KEY (movie_id, studio_id)
);

CREATE TABLE album_genres (
  album_id INTEGER REFERENCES albums(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (album_id, genre_id)
);

CREATE TABLE musician_genres (
  musician_id INTEGER REFERENCES musicians(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (musician_id, genre_id)
);

CREATE TABLE track_genres (
  track_id INTEGER REFERENCES tracks(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (track_id, genre_id)
);

-- ================
-- Indexes
-- ================

-- Core lookups
CREATE INDEX idx_movies_title ON movies (title);
CREATE INDEX idx_movies_year ON movies (year);
CREATE INDEX idx_movies_release_date ON movies (release_date);
CREATE INDEX idx_movies_tmdb_id ON movies (tmdb_id);
CREATE INDEX idx_movies_imdb_id ON movies (imdb_id);

-- Composite indexes for common filtering patterns
CREATE INDEX idx_movies_year_rating ON movies (year, audience_rating);
CREATE INDEX idx_movies_year_genre ON movies (year) INCLUDE (title, audience_rating);

CREATE INDEX idx_artists_name ON artists (name);
CREATE INDEX idx_musicians_name ON musicians (name);
CREATE INDEX idx_albums_title ON albums (title);

CREATE INDEX idx_tracks_title ON tracks (title);
CREATE INDEX idx_tracks_release_date ON tracks (release_date);
CREATE INDEX idx_tracks_album_order ON tracks (album_id, disc, index);

CREATE INDEX idx_genres_tag ON genres (tag);
CREATE INDEX idx_studios_name ON studios (name);

-- Foreign key helper indexes
CREATE INDEX idx_cast_list_movie_id ON cast_list (movie_id);
CREATE INDEX idx_cast_list_artist_id ON cast_list (artist_id);
CREATE INDEX idx_crew_list_movie_id ON crew_list (movie_id);
CREATE INDEX idx_crew_list_artist_id ON crew_list (artist_id);
CREATE INDEX idx_movie_extras_movie_id ON movie_extras (movie_id);
CREATE INDEX idx_chapters_movie_id ON chapters (movie_id);
CREATE INDEX idx_video_streams_movie_id ON video_streams (movie_id);
CREATE INDEX idx_audio_streams_movie_id ON audio_streams (movie_id);
CREATE INDEX idx_subtitles_movie_id ON subtitles (movie_id);

-- Many-to-many helper indexes
CREATE INDEX idx_movie_genres_movie_id ON movie_genres (movie_id);
CREATE INDEX idx_movie_genres_genre_id ON movie_genres (genre_id);
CREATE INDEX idx_movie_studios_movie_id ON movie_studios (movie_id);
CREATE INDEX idx_movie_studios_studio_id ON movie_studios (studio_id);
CREATE INDEX idx_tracks_album_id ON tracks (album_id);
CREATE INDEX idx_album_genres_album_id ON album_genres (album_id);
CREATE INDEX idx_album_genres_genre_id ON album_genres (genre_id);
CREATE INDEX idx_musician_genres_musician_id ON musician_genres (musician_id);
CREATE INDEX idx_musician_genres_genre_id ON musician_genres (genre_id);
CREATE INDEX idx_track_genres_track_id ON track_genres (track_id);
CREATE INDEX idx_track_genres_genre_id ON track_genres (genre_id);

-- =========================================================
-- Constraints to prevent duplicates & ensure consistency
-- =========================================================

-- Cast/Crew duplicates
ALTER TABLE cast_list ADD CONSTRAINT uq_cast UNIQUE (movie_id, artist_id, character);
ALTER TABLE crew_list ADD CONSTRAINT uq_crew UNIQUE (movie_id, artist_id, job);

-- Stream uniqueness per movie
ALTER TABLE video_streams ADD CONSTRAINT uq_video_stream_idx UNIQUE (movie_id, index);
ALTER TABLE audio_streams ADD CONSTRAINT uq_audio_stream_idx UNIQUE (movie_id, index);
ALTER TABLE subtitles     ADD CONSTRAINT uq_subtitle_stream_idx UNIQUE (movie_id, index);

-- Chapters: unique cue per movie
ALTER TABLE chapters ADD CONSTRAINT uq_chapter_start UNIQUE (movie_id, start_time_ms);

-- Singleton for global_settings
CREATE UNIQUE INDEX only_one_global_settings ON global_settings ((true));

-- Additional validation constraints
ALTER TABLE studios ADD CONSTRAINT chk_country_code CHECK (country ~ '^[A-Z]{2}$');
ALTER TABLE tracks ADD CONSTRAINT chk_language_code CHECK (language ~ '^[a-z]{2,4}$');
ALTER TABLE tracks ADD CONSTRAINT chk_disc_positive CHECK (disc >= 0);
ALTER TABLE tracks ADD CONSTRAINT chk_index_positive CHECK (index > 0);
ALTER TABLE tracks ADD CONSTRAINT chk_duration_positive CHECK (duration > 0);
ALTER TABLE tracks ADD CONSTRAINT chk_bit_rate_positive CHECK (bit_rate > 0);
ALTER TABLE tracks ADD CONSTRAINT chk_sample_rate_positive CHECK (sample_rate > 0);

ALTER TABLE video_streams ADD CONSTRAINT chk_video_dimensions CHECK (width > 0 AND height > 0);
ALTER TABLE video_streams ADD CONSTRAINT chk_video_index_positive CHECK (index >= 0);
ALTER TABLE video_streams ADD CONSTRAINT chk_video_duration_positive CHECK (duration_seconds > 0);

ALTER TABLE audio_streams ADD CONSTRAINT chk_audio_channels_positive CHECK (channels > 0);
ALTER TABLE audio_streams ADD CONSTRAINT chk_audio_index_positive CHECK (index >= 0);

ALTER TABLE subtitles ADD CONSTRAINT chk_subtitle_index_positive CHECK (index >= 0);

ALTER TABLE chapters ADD CONSTRAINT chk_chapter_time_positive CHECK (start_time_ms >= 0);

ALTER TABLE albums ADD CONSTRAINT chk_album_tracks_positive CHECK (total_tracks >= 0);
ALTER TABLE albums ADD CONSTRAINT chk_album_discs_positive CHECK (disc_count >= 0);

ALTER TABLE musicians ADD CONSTRAINT chk_musician_popularity CHECK (spotify_popularity >= 0 AND spotify_popularity <= 100);
ALTER TABLE musicians ADD CONSTRAINT chk_musician_followers CHECK (spotify_followers >= 0);

-- =========================================================
-- Triggers for automatic updated_at timestamp updates
-- =========================================================

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for all tables with updated_at columns
CREATE TRIGGER update_users_updated_at           BEFORE UPDATE ON users           FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_global_settings_updated_at BEFORE UPDATE ON global_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_movies_updated_at          BEFORE UPDATE ON movies          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_artists_updated_at         BEFORE UPDATE ON artists         FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_musicians_updated_at       BEFORE UPDATE ON musicians       FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_albums_updated_at          BEFORE UPDATE ON albums          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tracks_updated_at          BEFORE UPDATE ON tracks          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_genres_updated_at          BEFORE UPDATE ON genres          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_studios_updated_at         BEFORE UPDATE ON studios         FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_cast_list_updated_at       BEFORE UPDATE ON cast_list       FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_crew_list_updated_at       BEFORE UPDATE ON crew_list       FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_video_streams_updated_at   BEFORE UPDATE ON video_streams   FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_audio_streams_updated_at   BEFORE UPDATE ON audio_streams   FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_subtitles_updated_at       BEFORE UPDATE ON subtitles       FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_chapters_updated_at        BEFORE UPDATE ON chapters        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_movie_extras_updated_at    BEFORE UPDATE ON movie_extras    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

