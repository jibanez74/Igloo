/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TvshowsIndexImport } from './routes/tvshows/index'
import { Route as MusicIndexImport } from './routes/music/index'
import { Route as MoviesIndexImport } from './routes/movies/index'
import { Route as SettingsUsersImport } from './routes/settings/users'
import { Route as SettingsUsersIndexImport } from './routes/settings/users/index'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const SettingsIndexLazyImport = createFileRoute('/settings/')()
const SettingsUsersCreateLazyImport = createFileRoute(
  '/settings/users/create',
)()
const SettingsUserscreateLazyImport = createFileRoute(
  '/settings/users/@create',
)()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexLazyRoute = SettingsIndexLazyImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/settings/index.lazy').then((d) => d.Route),
)

const TvshowsIndexRoute = TvshowsIndexImport.update({
  id: '/tvshows/',
  path: '/tvshows/',
  getParentRoute: () => rootRoute,
} as any)

const MusicIndexRoute = MusicIndexImport.update({
  id: '/music/',
  path: '/music/',
  getParentRoute: () => rootRoute,
} as any)

const MoviesIndexRoute = MoviesIndexImport.update({
  id: '/movies/',
  path: '/movies/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsUsersRoute = SettingsUsersImport.update({
  id: '/settings/users',
  path: '/settings/users',
  getParentRoute: () => rootRoute,
} as any)

const SettingsUsersIndexRoute = SettingsUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsUsersRoute,
} as any)

const SettingsUsersCreateLazyRoute = SettingsUsersCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => SettingsUsersRoute,
} as any).lazy(() =>
  import('./routes/settings/users/create.lazy').then((d) => d.Route),
)

const SettingsUserscreateLazyRoute = SettingsUserscreateLazyImport.update({
  id: '/@create',
  path: '/@create',
  getParentRoute: () => SettingsUsersRoute,
} as any).lazy(() =>
  import('./routes/settings/users/@create.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/users': {
      id: '/settings/users'
      path: '/settings/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof SettingsUsersImport
      parentRoute: typeof rootRoute
    }
    '/movies/': {
      id: '/movies/'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesIndexImport
      parentRoute: typeof rootRoute
    }
    '/music/': {
      id: '/music/'
      path: '/music'
      fullPath: '/music'
      preLoaderRoute: typeof MusicIndexImport
      parentRoute: typeof rootRoute
    }
    '/tvshows/': {
      id: '/tvshows/'
      path: '/tvshows'
      fullPath: '/tvshows'
      preLoaderRoute: typeof TvshowsIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/users/@create': {
      id: '/settings/users/@create'
      path: '/@create'
      fullPath: '/settings/users/@create'
      preLoaderRoute: typeof SettingsUserscreateLazyImport
      parentRoute: typeof SettingsUsersImport
    }
    '/settings/users/create': {
      id: '/settings/users/create'
      path: '/create'
      fullPath: '/settings/users/create'
      preLoaderRoute: typeof SettingsUsersCreateLazyImport
      parentRoute: typeof SettingsUsersImport
    }
    '/settings/users/': {
      id: '/settings/users/'
      path: '/'
      fullPath: '/settings/users/'
      preLoaderRoute: typeof SettingsUsersIndexImport
      parentRoute: typeof SettingsUsersImport
    }
  }
}

// Create and export the route tree

interface SettingsUsersRouteChildren {
  SettingsUserscreateLazyRoute: typeof SettingsUserscreateLazyRoute
  SettingsUsersCreateLazyRoute: typeof SettingsUsersCreateLazyRoute
  SettingsUsersIndexRoute: typeof SettingsUsersIndexRoute
}

const SettingsUsersRouteChildren: SettingsUsersRouteChildren = {
  SettingsUserscreateLazyRoute: SettingsUserscreateLazyRoute,
  SettingsUsersCreateLazyRoute: SettingsUsersCreateLazyRoute,
  SettingsUsersIndexRoute: SettingsUsersIndexRoute,
}

const SettingsUsersRouteWithChildren = SettingsUsersRoute._addFileChildren(
  SettingsUsersRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/settings/users': typeof SettingsUsersRouteWithChildren
  '/movies': typeof MoviesIndexRoute
  '/music': typeof MusicIndexRoute
  '/tvshows': typeof TvshowsIndexRoute
  '/settings': typeof SettingsIndexLazyRoute
  '/settings/users/@create': typeof SettingsUserscreateLazyRoute
  '/settings/users/create': typeof SettingsUsersCreateLazyRoute
  '/settings/users/': typeof SettingsUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/movies': typeof MoviesIndexRoute
  '/music': typeof MusicIndexRoute
  '/tvshows': typeof TvshowsIndexRoute
  '/settings': typeof SettingsIndexLazyRoute
  '/settings/users/@create': typeof SettingsUserscreateLazyRoute
  '/settings/users/create': typeof SettingsUsersCreateLazyRoute
  '/settings/users': typeof SettingsUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/settings/users': typeof SettingsUsersRouteWithChildren
  '/movies/': typeof MoviesIndexRoute
  '/music/': typeof MusicIndexRoute
  '/tvshows/': typeof TvshowsIndexRoute
  '/settings/': typeof SettingsIndexLazyRoute
  '/settings/users/@create': typeof SettingsUserscreateLazyRoute
  '/settings/users/create': typeof SettingsUsersCreateLazyRoute
  '/settings/users/': typeof SettingsUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/settings/users'
    | '/movies'
    | '/music'
    | '/tvshows'
    | '/settings'
    | '/settings/users/@create'
    | '/settings/users/create'
    | '/settings/users/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/movies'
    | '/music'
    | '/tvshows'
    | '/settings'
    | '/settings/users/@create'
    | '/settings/users/create'
    | '/settings/users'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/settings/users'
    | '/movies/'
    | '/music/'
    | '/tvshows/'
    | '/settings/'
    | '/settings/users/@create'
    | '/settings/users/create'
    | '/settings/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginLazyRoute: typeof LoginLazyRoute
  SettingsUsersRoute: typeof SettingsUsersRouteWithChildren
  MoviesIndexRoute: typeof MoviesIndexRoute
  MusicIndexRoute: typeof MusicIndexRoute
  TvshowsIndexRoute: typeof TvshowsIndexRoute
  SettingsIndexLazyRoute: typeof SettingsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginLazyRoute: LoginLazyRoute,
  SettingsUsersRoute: SettingsUsersRouteWithChildren,
  MoviesIndexRoute: MoviesIndexRoute,
  MusicIndexRoute: MusicIndexRoute,
  TvshowsIndexRoute: TvshowsIndexRoute,
  SettingsIndexLazyRoute: SettingsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/settings/users",
        "/movies/",
        "/music/",
        "/tvshows/",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/settings/users": {
      "filePath": "settings/users.tsx",
      "children": [
        "/settings/users/@create",
        "/settings/users/create",
        "/settings/users/"
      ]
    },
    "/movies/": {
      "filePath": "movies/index.tsx"
    },
    "/music/": {
      "filePath": "music/index.tsx"
    },
    "/tvshows/": {
      "filePath": "tvshows/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.lazy.tsx"
    },
    "/settings/users/@create": {
      "filePath": "settings/users/@create.lazy.tsx",
      "parent": "/settings/users"
    },
    "/settings/users/create": {
      "filePath": "settings/users/create.lazy.tsx",
      "parent": "/settings/users"
    },
    "/settings/users/": {
      "filePath": "settings/users/index.tsx",
      "parent": "/settings/users"
    }
  }
}
ROUTE_MANIFEST_END */
