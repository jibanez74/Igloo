/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/solid-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AuthTvshowsIndexImport } from './routes/_auth/tvshows/index'
import { Route as AuthMusicIndexImport } from './routes/_auth/music/index'
import { Route as AuthMoviesIndexImport } from './routes/_auth/movies/index'
import { Route as AuthMoviesMovieIDImport } from './routes/_auth/movies/$movieID'
import { Route as AuthSettingsUsersIndexImport } from './routes/_auth/settings/users/index'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const AuthSettingsIndexLazyImport = createFileRoute('/_auth/settings/')()
const AuthMoviesMovieIDPlayLazyImport = createFileRoute(
  '/_auth/movies/$movieID/play',
)()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSettingsIndexLazyRoute = AuthSettingsIndexLazyImport.update({
  id: '/_auth/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/_auth/settings/index.lazy').then((d) => d.Route),
)

const AuthTvshowsIndexRoute = AuthTvshowsIndexImport.update({
  id: '/_auth/tvshows/',
  path: '/tvshows/',
  getParentRoute: () => rootRoute,
} as any)

const AuthMusicIndexRoute = AuthMusicIndexImport.update({
  id: '/_auth/music/',
  path: '/music/',
  getParentRoute: () => rootRoute,
} as any)

const AuthMoviesIndexRoute = AuthMoviesIndexImport.update({
  id: '/_auth/movies/',
  path: '/movies/',
  getParentRoute: () => rootRoute,
} as any)

const AuthMoviesMovieIDRoute = AuthMoviesMovieIDImport.update({
  id: '/_auth/movies/$movieID',
  path: '/movies/$movieID',
  getParentRoute: () => rootRoute,
} as any)

const AuthSettingsUsersIndexRoute = AuthSettingsUsersIndexImport.update({
  id: '/_auth/settings/users/',
  path: '/settings/users/',
  getParentRoute: () => rootRoute,
} as any)

const AuthMoviesMovieIDPlayLazyRoute = AuthMoviesMovieIDPlayLazyImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => AuthMoviesMovieIDRoute,
} as any).lazy(() =>
  import('./routes/_auth/movies/$movieID.play.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/movies/$movieID': {
      id: '/_auth/movies/$movieID'
      path: '/movies/$movieID'
      fullPath: '/movies/$movieID'
      preLoaderRoute: typeof AuthMoviesMovieIDImport
      parentRoute: typeof rootRoute
    }
    '/_auth/movies/': {
      id: '/_auth/movies/'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof AuthMoviesIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/music/': {
      id: '/_auth/music/'
      path: '/music'
      fullPath: '/music'
      preLoaderRoute: typeof AuthMusicIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/tvshows/': {
      id: '/_auth/tvshows/'
      path: '/tvshows'
      fullPath: '/tvshows'
      preLoaderRoute: typeof AuthTvshowsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/settings/': {
      id: '/_auth/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/movies/$movieID/play': {
      id: '/_auth/movies/$movieID/play'
      path: '/play'
      fullPath: '/movies/$movieID/play'
      preLoaderRoute: typeof AuthMoviesMovieIDPlayLazyImport
      parentRoute: typeof AuthMoviesMovieIDImport
    }
    '/_auth/settings/users/': {
      id: '/_auth/settings/users/'
      path: '/settings/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof AuthSettingsUsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthMoviesMovieIDRouteChildren {
  AuthMoviesMovieIDPlayLazyRoute: typeof AuthMoviesMovieIDPlayLazyRoute
}

const AuthMoviesMovieIDRouteChildren: AuthMoviesMovieIDRouteChildren = {
  AuthMoviesMovieIDPlayLazyRoute: AuthMoviesMovieIDPlayLazyRoute,
}

const AuthMoviesMovieIDRouteWithChildren =
  AuthMoviesMovieIDRoute._addFileChildren(AuthMoviesMovieIDRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/movies/$movieID': typeof AuthMoviesMovieIDRouteWithChildren
  '/movies': typeof AuthMoviesIndexRoute
  '/music': typeof AuthMusicIndexRoute
  '/tvshows': typeof AuthTvshowsIndexRoute
  '/settings': typeof AuthSettingsIndexLazyRoute
  '/movies/$movieID/play': typeof AuthMoviesMovieIDPlayLazyRoute
  '/settings/users': typeof AuthSettingsUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/movies/$movieID': typeof AuthMoviesMovieIDRouteWithChildren
  '/movies': typeof AuthMoviesIndexRoute
  '/music': typeof AuthMusicIndexRoute
  '/tvshows': typeof AuthTvshowsIndexRoute
  '/settings': typeof AuthSettingsIndexLazyRoute
  '/movies/$movieID/play': typeof AuthMoviesMovieIDPlayLazyRoute
  '/settings/users': typeof AuthSettingsUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginLazyRoute
  '/_auth/movies/$movieID': typeof AuthMoviesMovieIDRouteWithChildren
  '/_auth/movies/': typeof AuthMoviesIndexRoute
  '/_auth/music/': typeof AuthMusicIndexRoute
  '/_auth/tvshows/': typeof AuthTvshowsIndexRoute
  '/_auth/settings/': typeof AuthSettingsIndexLazyRoute
  '/_auth/movies/$movieID/play': typeof AuthMoviesMovieIDPlayLazyRoute
  '/_auth/settings/users/': typeof AuthSettingsUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/movies/$movieID'
    | '/movies'
    | '/music'
    | '/tvshows'
    | '/settings'
    | '/movies/$movieID/play'
    | '/settings/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/movies/$movieID'
    | '/movies'
    | '/music'
    | '/tvshows'
    | '/settings'
    | '/movies/$movieID/play'
    | '/settings/users'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/_auth/movies/$movieID'
    | '/_auth/movies/'
    | '/_auth/music/'
    | '/_auth/tvshows/'
    | '/_auth/settings/'
    | '/_auth/movies/$movieID/play'
    | '/_auth/settings/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginLazyRoute: typeof LoginLazyRoute
  AuthMoviesMovieIDRoute: typeof AuthMoviesMovieIDRouteWithChildren
  AuthMoviesIndexRoute: typeof AuthMoviesIndexRoute
  AuthMusicIndexRoute: typeof AuthMusicIndexRoute
  AuthTvshowsIndexRoute: typeof AuthTvshowsIndexRoute
  AuthSettingsIndexLazyRoute: typeof AuthSettingsIndexLazyRoute
  AuthSettingsUsersIndexRoute: typeof AuthSettingsUsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginLazyRoute: LoginLazyRoute,
  AuthMoviesMovieIDRoute: AuthMoviesMovieIDRouteWithChildren,
  AuthMoviesIndexRoute: AuthMoviesIndexRoute,
  AuthMusicIndexRoute: AuthMusicIndexRoute,
  AuthTvshowsIndexRoute: AuthTvshowsIndexRoute,
  AuthSettingsIndexLazyRoute: AuthSettingsIndexLazyRoute,
  AuthSettingsUsersIndexRoute: AuthSettingsUsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/_auth/movies/$movieID",
        "/_auth/movies/",
        "/_auth/music/",
        "/_auth/tvshows/",
        "/_auth/settings/",
        "/_auth/settings/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/_auth/movies/$movieID": {
      "filePath": "_auth/movies/$movieID.tsx",
      "children": [
        "/_auth/movies/$movieID/play"
      ]
    },
    "/_auth/movies/": {
      "filePath": "_auth/movies/index.tsx"
    },
    "/_auth/music/": {
      "filePath": "_auth/music/index.tsx"
    },
    "/_auth/tvshows/": {
      "filePath": "_auth/tvshows/index.tsx"
    },
    "/_auth/settings/": {
      "filePath": "_auth/settings/index.lazy.tsx"
    },
    "/_auth/movies/$movieID/play": {
      "filePath": "_auth/movies/$movieID.play.lazy.tsx",
      "parent": "/_auth/movies/$movieID"
    },
    "/_auth/settings/users/": {
      "filePath": "_auth/settings/users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
